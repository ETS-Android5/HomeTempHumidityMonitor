Build1=Default,cloyd.smart.home.monitor
File1=0.png
File10=blinkscrollview.bal
File11=camera-icon.png
File12=cloyd.png
File13=compiletime.txt
File14=crysta.ttf
File15=exo_controls_fullscreen_enter.png
File16=ic_play.png
File17=liveviewbuttontranparent.png
File18=Main.bal
File19=ScrollViewBasement.bal
File2=1.bal
File20=snapshotbutton.png
File21=TempHumidityBasement.bal
File3=1ScrollView.bal
File4=2.bal
File5=AirQualityBasement.bal
File6=blink.bal
File7=blink_clip_roll_blue_dot_icon.png
File8=blinkactivity.bal
File9=blinkcellitem.bal
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=Default Group
FileGroup20=Default Group
FileGroup21=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=core
Library10=tabstripviewpager
Library11=reflection
Library12=notificationbuilder
Library13=notificationlistener
Library14=randomaccessfile
Library15=dateutils
Library16=ahpreferenceactivity
Library17=okhttputils2
Library18=xcustomlistview
Library19=json
Library2=appcompat
Library20=bitmapcreator
Library21=xui views
Library22=runtimepermissions
Library23=webviewsettings
Library24=sql
Library25=b4xencryption
Library26=b4xbitmapeffects
Library27=b4xcollections
Library28=zoomimageview
Library29=network
Library3=javaobject
Library4=xmllayoutbuilder
Library5=jmqtt
Library6=callsubutils
Library7=byteconverter
Library8=xui
Library9=phone
ManifestCode=AddManifestText(~\n~<uses-sdk android:minSdkVersion="7" android:targetSdkVersion="29"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'End of default text.~\n~~\n~SetApplicationAttribute(android:theme, "@style/MyAppTheme")~\n~CreateResource(values, colors.xml,~\n~<resources>~\n~    <color name="actionbar">#90a4ae</color>~\n~   <color name="statusbar">#62757f</color>~\n~   <color name="textColorPrimary">#000000</color>~\n~   <color name="navigationBar">#90a4ae</color>~\n~</resources>~\n~)~\n~CreateResource(values, theme.xml,~\n~<resources>~\n~    <style name="MyAppTheme" parent="Theme.AppCompat.Light">~\n~        <item name="colorPrimary">@color/actionbar</item>~\n~        <item name="colorPrimaryDark">@color/statusbar</item>~\n~       <item name="android:textColorPrimary">@color/textColorPrimary</item>~\n~       <item name="android:navigationBarColor">@color/navigationBar</item>~\n~       <item name="windowNoTitle">true</item>~\n~       <item name="windowActionBar">false</item>~\n~       <item name="windowActionModeOverlay">true</item>~\n~    </style>~\n~	<style name="ToolbarMenu" parent="Base.ThemeOverlay.AppCompat.ActionBar">~\n~	    <item name="android:textColorPrimary">#000000</item>~\n~	    <item name="android:colorBackground">#B0BEC5</item>~\n~    </style>~\n~</resources>~\n~)~\n~~\n~AddApplicationText(~\n~<service android:name="anywheresoftware.b4a.objects.NotificationListenerWrapper"~\n~   android:label="Smart Home Monitor"~\n~  android:permission="android.permission.BIND_NOTIFICATION_LISTENER_SERVICE">~\n~  <intent-filter>~\n~  <action android:name="android.service.notification.NotificationListenerService" />~\n~  </intent-filter>~\n~</service>)~\n~~\n~AddApplicationText(~\n~<activity~\n~  android:name="de.amberhome.objects.preferenceactivity"~\n~  android:theme="@android:style/Theme.Material.Light">~\n~</activity>~\n~)~\n~~\n~AddManifestText(~\n~<uses-permission~\n~  android:name="android.permission.WRITE_EXTERNAL_STORAGE"~\n~  android:maxSdkVersion="18" />~\n~)~\n~~\n~AddManifestText(<uses-permission~\n~   android:name="android.permission.WRITE_EXTERNAL_STORAGE"~\n~   android:maxSdkVersion="18" />~\n~)~\n~~\n~AddApplicationText(~\n~  <provider~\n~  android:name="android.support.v4.content.FileProvider"~\n~  android:authorities="$PACKAGE$.provider"~\n~  android:exported="false"~\n~  android:grantUriPermissions="true">~\n~  <meta-data~\n~  android:name="android.support.FILE_PROVIDER_PATHS"~\n~  android:resource="@xml/provider_paths"/>~\n~  </provider>~\n~)~\n~CreateResource(xml, provider_paths,~\n~   <files-path name="name" path="shared" />~\n~)~\n~~\n~SetApplicationAttribute(android:largeHeap, "true")
Module1=B4XPageIndicator
Module10=Starter
Module11=StateManager
Module2=Badger
Module3=cMediaData
Module4=FileProvider
Module5=Gauge
Module6=KeyValueStore
Module7=MJPEG
Module8=NotificationService
Module9=SmartHomeMonitor
NumberOfFiles=21
NumberOfLibraries=29
NumberOfModules=11
Version=10.2
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: Smart Home Monitor
	#VersionCode: 2088
	#VersionName: 2.0.8.8
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
	#BridgeLogger:True
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region
	#AdditionalRes: "..\resource"
	#Extends: android.support.v7.app.AppCompatActivity
	#AdditionalJar: com.android.support:support-v4
	#CustomBuildAction: 2, C:\Program Files (x86)\Java\jdk1.8.0_202\bin\java.exe, -jar "C:\Users\ccatanaoan\Desktop\IoT\HomeTempHumidityMonitor\Android Client\compiletime.jar"
	
Sub Process_Globals
	Private MQTT As MqttClient
	Private MQTTUser As String = "vynckfaq"
	Private MQTTPassword As String = "KHSV1Q1qSUUY"
	Private MQTTServerURI As String = "tcp://m14.cloudmqtt.com:11816"
	Private bc As ByteConverter
	Private csu As CallSubUtils
	Private OldIntent As Intent
	Dim manager As AHPreferenceManager
	Dim screen As AHPreferenceScreen
	
	Private emailAddress As String
	Private password As String
	Private authToken As String
	Private userRegion As String = "u006"
	Private accountID As String = "88438" 'ignore
	Private networkID As String = "94896"
	Private TwoClientFAVerificationRequired As String
	Private TwoFAClientID As String
	Private commandID As String
	Private commandComplete As Boolean
	Private cameraThumbnail As String
	Private response As String
	Private previousSelectedIndex As Int
	Private mediaMetaData As cMediaData
	Private SideYardArmedStatus As String
	Private FrontYardArmedStatus As String
	Private BackyardArmedStatus As String
	Type CardData (screenshot As B4XBitmap,filedate As String, deviceinfo As String, iswatchedvisible As Boolean, mediaURL As String)
	Type VideoInfo (ThumbnailPath As String, DateCreated As String, Watched As String, DeviceName As String, VideoID As String, ThumbnailBLOB() As Byte)
	Public isThereUnwatchedVideo As Boolean
	Private bmp As B4XBitmap
	Private prevCameraThumbnail As String
	Private SideYardBattStatus As String
	Private FrontYardBattStatus As String
	Private BackyardBattStatus As String
	Private CurrentPage As Int
	Private Pages As List
	Private Awake As PhoneWakeState
	Private effects As BitmapCreatorEffects
	Private compileTimeStamp As String
End Sub

Sub Globals
	Private ACToolBarLight1 As ACToolBarLight
	Private ToolbarHelper As ACActionBar
	Private gblACMenu As ACMenu
	Private xui As XUI
	Private GaugeHumidity As Gauge
	Private GaugeTemp As Gauge
	Private GaugeDewPoint As Gauge
	Private GaugeHeatIndex As Gauge
	Private lblComfort As Label
	Private lblPerception As Label
	Private lblLastUpdate As Label
	Private lblPing As Label
	Private TabStrip1 As TabStrip
	Private lblFontAwesome As Label
	Private GaugeAirQuality As Gauge
	Private lblAirQuality As Label
	Private lblAirQualityLastUpdate As Label
	Private ScrollView1 As ScrollView
	Private Panel1 As Panel
	Private GaugeAirQualityBasement As Gauge
	Private lblAirQualityBasement As Label
	Private lblAirQualityLastUpdateBasement As Label
	Private PanelAirQualityBasement As Panel
	Private GaugeDewPointBasement As Gauge
	Private GaugeHeatIndexBasement As Gauge
	Private GaugeHumidityBasement As Gauge
	Private GaugeTempBasement As Gauge
	Private lblComfortBasement As Label
	Private lblLastUpdateBasement As Label
	Private lblPerceptionBasement As Label
	Private lblPingBasement As Label
	Private ScrollViewBasement As ScrollView
	Private PanelTempHumidityBasement As Panel
	Private lblStatus As Label
	Private ivSideYard As ImageView
	Private ivFrontYard As ImageView
	Private ivBackyard As ImageView
	Private ScrollViewBlink As ScrollView
	Private panelBlink As Panel
	Private lblSideYard As Label
	Private lblFrontYard As Label
	Private lblBackyard As Label
	Private lblSideYardBatt As Label
	Private lblSideYardTimestamp As Label
	Private lblSideYardWifi As Label
	Private lblFrontYardBatt As Label
	Private lblFrontYardTimestamp As Label
	Private lblFrontYardWiFi As Label
	Private lblBackyardBatt As Label
	Private lblBackyardTimestamp As Label
	Private lblBackyardWiFi As Label
	Private lblSyncModule As Label
	Private B4XPageIndicator1 As B4XPageIndicator
	Private ivScreenshot As ImageView
	Private lblDate As B4XView
	Private lblDeviceInfo As B4XView
	Private lblFileInfo As B4XView
	Private clvActivity As CustomListView
	Private wvMedia As WebView
	Private WebViewSettings1 As WebViewSettings
	Private B4XLoadingIndicator4 As B4XLoadingIndicator
	Private lblDuration As Label
	Private ivWatched As ImageView
	Private badger1 As Badger
	Private btnSideYardNewClip As ImageView
	Private btnFrontYardNewClip As ImageView
	Private btnBackyardNewClip As ImageView
	Private btnRefresh As SwiftButton
	Private btnSideYard As SwiftButton
	Private lblMediaURL As B4XView
	Private ivPlay As ImageView
	Private nativeMe As JavaObject
	Private btnBackyardRefresh As ImageView
	Private btnFrontYardRefresh As ImageView
	Private btnSideYardRefresh As ImageView
	Private swArmed As B4XSwitch
	Private dialog As B4XDialog
End Sub

Sub Activity_Create(FirstTime As Boolean)
	Try
		nativeMe.InitializeContext
		nativeMe.RunMethod("setDefaultUncaughtExceptionHandler", Null)
		
		If FirstTime Then
			CreatePreferenceScreen
			If manager.GetAll.Size = 0 Then SetDefaults
			
			StartService(SmartHomeMonitor)
			csu.Initialize
			MQTT_Connect
			
			Dim compiledata As Map
			compiledata = File.ReadMap(File.DirAssets, "compiletime.txt")
			Log($"autoversion: ${compiledata.Get("autoversion")}"$)
			Log($"compilation time: $DateTime{compiledata.Get("time")}"$)
			compileTimeStamp = compiledata.Get("time")
		End If
		Activity.LoadLayout("Main")
		
		dialog.Initialize(Activity)
		dialog.Title = "Smart Home Monitor"
		
		Dim iCrash As Intent
		iCrash = Activity.GetStartingIntent
		If iCrash.HasExtra("Crash") Then
			Log("After crash: " & iCrash.GetExtra("Crash"))
		End If

		TabStrip1.LoadLayout("1ScrollView", "LIVING AREA" & CRLF & "Temp & Humidity  " & Chr(0xF2C7))
		ScrollView1.Panel.LoadLayout("1")
		Panel1.Height = ScrollView1.Height 'Panel1.Height + 100dip
		ScrollView1.Panel.Height = Panel1.Height
		TabStrip1.LoadLayout("2", "LIVING AREA" & CRLF & "Air Quality (CO)  " & Chr(0xF289))
		TabStrip1.LoadLayout("ScrollViewBasement", "BASEMENT" & CRLF & "Temp & Humidity  " & Chr(0xF2C7))
		ScrollViewBasement.Panel.LoadLayout("TempHumidityBasement")
		PanelTempHumidityBasement.Height = ScrollViewBasement.Height 'PanelTempHumidityBasement.Height + 100dip
		ScrollViewBasement.Panel.Height = PanelTempHumidityBasement.Height
		TabStrip1.LoadLayout("AirQualityBasement", "BASEMENT" & CRLF & "Air Quality (CO)  " & Chr(0xF289))
		TabStrip1.LoadLayout("blinkscrollview", "BLINK CAMERAS" & CRLF & "Live View  " & Chr(0xF030))
		ScrollViewBlink.Panel.LoadLayout("blink")
		'https://www.b4x.com/android/forum/threads/how-to-create-a-scrollable-screen.102755/#post-644462
		ScrollViewBlink.panel.height = 910dip
		panelBlink.Height = 910dip
		TabStrip1.LoadLayout("blinkactivity", "BLINK CAMERAS" & CRLF & "Events  " & Chr(0xF03D))
		
		For Each lbl As Label In GetAllTabLabels(TabStrip1)
			' Two lines in a tab of TabStripViewPager
			lbl.SingleLine = False
			' To add icon
			lbl.Typeface = Typeface.FONTAWESOME
			' To add space around the label text
			lbl.Padding = Array As Int(0, 0, 0, 0)
			
		Next
		
		For Each v As View In GetAllTabLabels(TabStrip1)
			' To equally align the tab headers
			v.Width = 33%x
		Next
		
		Dim bd As BitmapDrawable
		bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
		ACToolBarLight1.NavigationIconDrawable = bd
		ToolbarHelper.Initialize
		Dim cs As CSBuilder
		ToolbarHelper.Title= cs.Initialize.Size(22).Append("Smart Home Monitor").PopAll
		ToolbarHelper.subTitle = ""
		ToolbarHelper.ShowUpIndicator = False 'set to true to show the up arrow
		ACToolBarLight1.InitMenuListener
		Dim jo As JavaObject = ACToolBarLight1
		Dim xl As XmlLayoutBuilder
		jo.RunMethod("setPopupTheme", Array(xl.GetResourceId("style", "ToolbarMenu")))
		
		GaugeHumidity.SetRanges(Array(GaugeHumidity.CreateRange(0, 70, xui.Color_RGB(100,221,23)), _
		GaugeHumidity.CreateRange(70, 80, xui.Color_Yellow), _
		GaugeHumidity.CreateRange(80, 100, xui.Color_Red)))
		GaugeTemp.SetRanges(Array(GaugeTemp.CreateRange(0, 75, xui.Color_RGB(100,221,23)), _
	    GaugeTemp.CreateRange(75, 90, xui.Color_Yellow), _
	    GaugeTemp.CreateRange(90, 100, xui.Color_Red)))	
		GaugeHeatIndex.SetRanges(Array(GaugeHeatIndex.CreateRange(0, 75, xui.Color_RGB(100,221,23)), _
	    GaugeHeatIndex.CreateRange(75, 90, xui.Color_Yellow), _
	    GaugeHeatIndex.CreateRange(90, 100, xui.Color_Red)))
		' Dew Point
		' https://material.io/guidelines/style/color.html#
		GaugeDewPoint.SetRanges(Array(GaugeDewPoint.CreateRange(0,60.8, xui.Color_RGB(100,221,23)), _
		GaugeDewPoint.CreateRange(60.8,64.4, xui.Color_RGB(100,240,23)), _
		GaugeDewPoint.CreateRange(64.4,78.8, xui.Color_Yellow), _
	    GaugeDewPoint.CreateRange(78.8, 100, xui.Color_Red)))
		' Dew Point
		
		GaugeAirQuality.SetRanges(Array(GaugeAirQuality.CreateRange(0, 10, xui.Color_RGB(100,221,23)), _
		GaugeAirQuality.CreateRange(10, 40, xui.Color_RGB(100,240,23)), _
	    GaugeAirQuality.CreateRange(40, 90, xui.Color_Yellow), _
	    GaugeAirQuality.CreateRange(90, 100, xui.Color_Red)))	
		GaugeAirQuality.CurrentValue=0
		
		GaugeHumidityBasement.SetRanges(Array(GaugeHumidityBasement.CreateRange(0, 70, xui.Color_RGB(100,221,23)), _
		GaugeHumidityBasement.CreateRange(70, 80, xui.Color_Yellow), _
		GaugeHumidityBasement.CreateRange(80, 100, xui.Color_Red)))
		GaugeTempBasement.SetRanges(Array(GaugeTempBasement.CreateRange(0, 75, xui.Color_RGB(100,221,23)), _
	    GaugeTempBasement.CreateRange(75, 90, xui.Color_Yellow), _
	    GaugeTempBasement.CreateRange(90, 100, xui.Color_Red)))	
		GaugeHeatIndexBasement.SetRanges(Array(GaugeHeatIndexBasement.CreateRange(0, 75, xui.Color_RGB(100,221,23)), _
	    GaugeHeatIndexBasement.CreateRange(75, 90, xui.Color_Yellow), _
	    GaugeHeatIndexBasement.CreateRange(90, 100, xui.Color_Red)))
		' Dew Point
		' https://material.io/guidelines/style/color.html#
		GaugeDewPointBasement.SetRanges(Array(GaugeDewPointBasement.CreateRange(0,60.8, xui.Color_RGB(100,221,23)), _
		GaugeDewPointBasement.CreateRange(60.8,64.4, xui.Color_RGB(100,240,23)), _
		GaugeDewPointBasement.CreateRange(64.4,78.8, xui.Color_Yellow), _
	    GaugeDewPointBasement.CreateRange(78.8, 100, xui.Color_Red)))
		' Dew Point
		
		GaugeAirQualityBasement.SetRanges(Array(GaugeAirQualityBasement.CreateRange(0, 10, xui.Color_RGB(100,221,23)), _
		GaugeAirQualityBasement.CreateRange(10, 40, xui.Color_RGB(100,240,23)), _
	    GaugeAirQualityBasement.CreateRange(40, 90, xui.Color_Yellow), _
	    GaugeAirQualityBasement.CreateRange(90, 100, xui.Color_Red)))	
		GaugeAirQualityBasement.CurrentValue=0
		
		Dim cs As CSBuilder
		cs.Initialize
		lblPerception.Text = cs.Initialize.Bold.Append("Human Perception: ").Pop.Append("Waiting for data...").PopAll
		lblComfort.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Append("Waiting for data...").PopAll
		DateTime.DateFormat = "MMMM d, h:mm:ss a"
		lblLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append("").PopAll
		lblPing.Visible = False
		GaugeAirQuality.CurrentValue = 0
		GaugeAirQualityBasement.CurrentValue = 0
		lblAirQuality.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Append("Waiting for data...").PopAll
		lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").PopAll
		
		lblPerceptionBasement.Text = cs.Initialize.Bold.Append("Human Perception: ").Pop.Append("Waiting for data...").PopAll
		lblComfortBasement.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Append("Waiting for data...").PopAll
		DateTime.DateFormat = "MMMM d, h:mm:ss a"
		lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append("").PopAll
		lblPingBasement.Visible = False
		lblAirQualityBasement.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Append("Waiting for data...").PopAll
		lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").PopAll
		
		If MQTT.IsInitialized And MQTT.Connected  Then
			MQTT.Publish("TempHumid", bc.StringToBytes("Read weather", "utf8"))
			
			Dim strHumidityAddValue As String = StateManager.GetSetting("HumidityAddValue")
			If strHumidityAddValue = "" Then
				strHumidityAddValue = "0"
			End If
			MQTT.Publish("HumidityAddValue", bc.StringToBytes(strHumidityAddValue, "utf8"))
		End If
				
		SetTextShadow(lblSideYardBatt)
		SetTextShadow(lblSideYardTimestamp)
		SetTextShadow(lblSideYardWifi)
		SetTextShadow(lblFrontYardBatt)
		SetTextShadow(lblFrontYardTimestamp)
		SetTextShadow(lblFrontYardWiFi)
		SetTextShadow(lblBackyardBatt)
		SetTextShadow(lblBackyardTimestamp)
		SetTextShadow(lblBackyardWiFi)
		SetTextShadow(lblDuration)
		SetTextShadow(lblSideYard)
		SetTextShadow(lblFrontYard)
		SetTextShadow(lblBackyard)
		
		badger1.Initialize
		
		For Each lblBadge As B4XView In GetAllTabLabelsForBadge(TabStrip1)
			Dim Width, Height As Int
			Dim jo As JavaObject = lblBadge
			Do While True
				Width = jo.RunMethod("getMeasuredWidth", Null)
				Height = jo.RunMethod("getMeasuredHeight", Null)
				If Width > 0 And Height > 0 Then
					Exit
				End If
				Sleep(50)
			Loop
			Dim p As Panel = xui.CreatePanel("")
			p.Tag = lblBadge
			lblBadge.Parent.AddView(p, 0, 0, Width, Height)
			lblBadge.RemoveViewFromParent
			p.AddView(lblBadge, 0, 0, Width, Height)
		Next
		
		CheckDataFile("account.txt")
		
		If FirstTime Or authToken = "" Then
			Dim rs As ResumableSub = RequestAuthToken
			wait for (rs) complete (Result As Object)
		End If

		Pages = Array(True, True, True, True, True, True) 'True = Enabled
		
	Catch
		ToastMessageShow(LastException,True)
	End Try
End Sub

Sub Activity_Resume
	Try
		Awake.KeepAlive(True)
		
		If File.Exists(File.DirInternal, "SideYard.jpg") Then
			bmp = xui.LoadBitmapResize(File.DirInternal, "SideYard.jpg", ivSideYard.Width,ivSideYard.Height, True)
			ivSideYard.Bitmap = bmp
		End If
		If File.Exists(File.DirInternal, "FrontYard.jpg") Then
			bmp = xui.LoadBitmapResize(File.DirInternal, "FrontYard.jpg", ivFrontYard.Width,ivFrontYard.Height, True)
			ivFrontYard.Bitmap = bmp
		End If
		If File.Exists(File.DirInternal, "Backyard.jpg") Then
			bmp = xui.LoadBitmapResize(File.DirInternal, "Backyard.jpg", ivFrontYard.Width,ivFrontYard.Height, True)
			ivBackyard.Bitmap = bmp
		End If
		
		HandleSettings
		Dim in As Intent = Activity.GetStartingIntent
		Dim NotificationClicked As String
		If in.IsInitialized And in <> OldIntent Then
			OldIntent = in
			If in.HasExtra("Notification_Tag") Then
				NotificationClicked = in.GetExtra("Notification_Tag")
			End If
		End If
		
		If NotificationClicked = "Living area temperature" Then
			TabStrip1.ScrollTo(0,False)
			'TabStrip1_PageSelected(0)
		Else If NotificationClicked = "Living area carbon monoxide" Then
			TabStrip1.ScrollTo(1,False)
			'TabStrip1_PageSelected(1)
		else If NotificationClicked = "Basement temperature" Then
			TabStrip1.ScrollTo(2,False)
			'TabStrip1_PageSelected(2)
		Else If NotificationClicked = "Basement carbon monoxide" Then
			TabStrip1.ScrollTo(3,False)
			'TabStrip1_PageSelected(3)
		Else If NotificationClicked = "Basement DHT22 sensor issue" Then
			TabStrip1.ScrollTo(2,False)
			'TabStrip1_PageSelected(2)
		Else If NotificationClicked = "Living area DHT22 sensor issue" Then
			TabStrip1.ScrollTo(0,False)
			'TabStrip1_PageSelected(0)
		Else If NotificationClicked = "Living area CO sensor issue" Then
			TabStrip1.ScrollTo(1,False)
			'TabStrip1_PageSelected(1)
		Else If NotificationClicked = "Basement CO sensor issue" Then
			TabStrip1.ScrollTo(3,False)
			'TabStrip1_PageSelected(3)
		End If
	
		If TabStrip1.CurrentPage = 0 Then
			TabStrip1_PageSelected(0)
		else If TabStrip1.CurrentPage = 1 Then
			TabStrip1_PageSelected(1)
		else If TabStrip1.CurrentPage = 2 Then
			TabStrip1_PageSelected(2)
		else If TabStrip1.CurrentPage = 3 Then
			TabStrip1_PageSelected(3)
		else If TabStrip1.CurrentPage = 4 Then
			TabStrip1_PageSelected(4)
		else If TabStrip1.CurrentPage = 5 Then
			TabStrip1_PageSelected(5)
		else If TabStrip1.CurrentPage = 6 Then
			TabStrip1_PageSelected(6)
		End If
	Catch
		Log(LastException)
	End Try
	
	Try
		If MQTT.IsInitialized = False Or MQTT.Connected = False Then
			MQTT_Connect
		End If
	Catch
		Log(LastException)
	End Try
End Sub

Sub Activity_Pause (UserClosed As Boolean)
	Awake.ReleaseKeepAlive

	wvMedia.LoadUrl("")
	
End Sub

'Connect to CloudMQTT broker
Sub MQTT_Connect
	Try
		Dim ClientId As String = Rnd(0, 999999999) 'create a unique id
		MQTT.Initialize("MQTT", MQTTServerURI, ClientId)

		Dim ConnOpt As MqttConnectOptions
		ConnOpt.Initialize(MQTTUser, MQTTPassword)
		MQTT.Connect2(ConnOpt)
	Catch
		Log("MQTT_Connect: " & LastException)
	End Try
End Sub

Sub MQTT_Connected (Success As Boolean)
	Try
		If Success = False Then
			Log(LastException)
			MQTT_Connect
		Else
			Log("Connected to MQTT broker")
			MQTT.Subscribe("TempHumid", 0)
			MQTT.Subscribe("MQ7", 0)
			MQTT.Subscribe("MQ7Basement", 0)
			MQTT.Subscribe("TempHumidBasement", 0)
			MQTT.Subscribe("HumidityAddValue", 0)
		End If
	Catch
		Log("MQTT_Connected: " & LastException)
	End Try
End Sub

Private Sub MQTT_Disconnected
	Try
		gblACMenu.Clear
		gblACMenu.Add(0, 0, "Settings",Null)
		gblACMenu.Add(0, 0, "Refresh video list",Null)
		gblACMenu.Add(0, 0, "Restart application",Null)
		gblACMenu.Add(0, 0, "Show free memory",Null)
		gblACMenu.Add(0, 0, "About",Null)
		Log("Disconnected from MQTT broker")
		MQTT_Connect
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub MQTT_MessageArrived (Topic As String, Payload() As Byte)
	Try
		If Topic = "TempHumid" Then
			lblPing.SetVisibleAnimated(500, True)
			csu.CallSubPlus(Me, "HidePing", 700)
			CheckTempHumiditySetting
		Else If Topic = "MQ7" Then
			CheckAirQualitySetting
		Else If Topic = "MQ7Basement" Then
			CheckAirQualitySettingBasement
		Else If Topic = "TempHumidBasement" Then
			lblPingBasement.SetVisibleAnimated(500, True)
			csu.CallSubPlus(Me, "HidePingBasement", 700)
		
			CheckTempHumiditySettingBasement
		End If
	Catch
		Log(LastException)
	End Try
End Sub

Sub GetAirQuality(number As Int) As String
	' Detecting range: 10ppm-1000ppm carbon monoxide
	' Air quality-cases: < 100 perfect | 100 - 400 normal | > 400 - 900 high | > 900 abnormal
	If number <= 10 Then
		Return("Carbon monoxide perfect")
	else if ((number > 10) And (number < 40)) Or number = 40 Then
		Return("Carbon monoxide normal")
	else if ((number > 40) And (number < 90)) Or number = 90 Then
		Return("Carbon monoxide high")
	else If number > 90 Then
		Return("ALARM Carbon monoxide very high")
	Else
		Return("MQ-7 - cant read any value - check the sensor!")
	End If
End Sub

Sub GetPerception(DHT11Perception As String) As String
	' Return value       Dew point                        Human perception[6]
	'    7         Over 26 °C (>78.8°F)     Severely high, even deadly For asthma related illnesses
	'    6         24–26 °C (75.2-78.8°F)   Extremely uncomfortable, oppressive
	'    5         21–24 °C (69.8-75.2°F)   Very humid, quite uncomfortable
	'    4         18–21 °C (64.4-69.8°F)   Somewhat uncomfortable For most people at upper limit
	'    3         16–18 °C (60.8-64.4°F)   OK For most, but everyone perceives the humidity at upper limit
	'    2         13–16 °C (55.4-60.8°F)   Comfortable
	'    1         10–12 °C (50-53.6°F)     Very comfortable
	'    0         Under 10 °C (<50°F)      Feels like the western US, a Bit dry To some
	
	Dim localperception As String
	Select Case DHT11Perception
		' https://www.google.com/url?sa=i&source=imgres&cd=&cad=rja&uact=8&ved=2ahUKEwiQ2LSXpMznAhVkgnIEHQ67C9cQjRx6BAgBEAQ&url=https%3A%2F%2Ftwitter.com%2Fterpweather%2Fstatus%2F484003487127461889&psig=AOvVaw0h-Vtb_wN3Yy_gfmROPjFh&ust=1581606149864984
		Case 0
			localperception = "A bit dry"
		Case 1
			localperception = "Very comfortable"
		Case 2
			localperception = "Comfortable"
		Case 3
			localperception = "Okay but sticky"
		Case 4
			localperception = "Slightly uncomfortable and the humidity is at upper limit"
		Case 5
			localperception = "Very humid and uncomfortable"
		Case 6
			localperception = "Extremely uncomfortable and oppressive"
		Case 7
			localperception = "Humidity is severely high and intolerable"
	End Select
	Return localperception
End Sub

Sub GetComfort(DHT11ComfortStatus As String) As String
	Dim localcomfortstatus As String
	Select Case DHT11ComfortStatus
		Case 0
			localcomfortstatus = "OK"
		Case 1
			localcomfortstatus = "Too hot"
		Case 2
			localcomfortstatus = "Too cold"
		Case 4
			localcomfortstatus = "Too dry"
		Case 5
			localcomfortstatus = "Hot and dry"
		Case 6
			localcomfortstatus = "Cold and dry"
		Case 8
			localcomfortstatus = "Too humid"
		Case 9
			localcomfortstatus = "Hot and humid"
		Case 10
			localcomfortstatus = "Cold and humid"
		Case Else
			localcomfortstatus = "Unknown"
	End Select
	Return localcomfortstatus
End Sub

Sub GetFreeMem As Float
	Dim r As Reflector
	Dim MM, TM, FM, Total As Int
	r.Target = r.RunStaticMethod("java.lang.Runtime", "getRuntime", Null, Null)
	MM = r.RunMethod("maxMemory")
	FM = r.RunMethod("freeMemory")
	TM = r.RunMethod("totalMemory")
	Total = MM + FM - TM
	Return Total / 1024
End Sub

Sub ACToolBarLight1_MenuItemClick (Item As ACMenuItem)
	Try
		If Item.Title = "About" Then
			ShowAboutMenu
		else if Item.Title = "Settings" Then
			StartActivity(screen.CreateIntent)
		Else If Item.Title = "Restart Application" Then
			Dim bd As BitmapDrawable
			bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
			If  Msgbox2("Restart the application?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) = DialogResponse.POSITIVE Then 'ignore
				' Restart application via Tasker intent
				Dim Intent1 As Intent
				Intent1.Initialize("smart.home.restart", "")
				Dim Phone As Phone
				Phone.SendBroadcastIntent(Intent1)
			End If
		Else If Item.Title = "Show free memory" Then
			Dim info As String
			info = Starter.kvs.ListKeys.Size & " video clips" & CRLF & CRLF
			Dim r As Reflector
			r.Target = r.RunStaticMethod("java.lang.Runtime", "getRuntime", Null, Null)
			info = info & "Available memory: " & NumberFormat2(((r.RunMethod("maxMemory") - r.RunMethod("totalMemory"))/(1024*1024)),0,2,2,False) & " MB" & CRLF
			info = info & "Free memory: " & NumberFormat2(GetFreeMem/1000,0,2,2,False) & " MB"
			Msgbox(info,"Smart Home Monitor") 'ignore
		else if Item.Title = "Refresh video list" Then
			Dim bd As BitmapDrawable
			bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
			If  Msgbox2("Refresh video list?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) = DialogResponse.POSITIVE Then 'ignore
				B4XLoadingIndicator4.Show
				
				lblDuration.Text = "0:00"
				wvMedia.LoadUrl("")
				Starter.kvs.DeleteAll
				clvActivity.Clear
				
				' Delete old videos
				Dim countDeleteVideo As Int = 0
				For Each f As String In File.ListFiles(File.DirInternal)
					If f.ToLowerCase.EndsWith(".mp4") Then
						If File.Delete(File.DirInternal, f) Then
							countDeleteVideo = countDeleteVideo + 1
						End If
					End If
				Next
				ToastMessageShow(countDeleteVideo & " videos deleted",True)
				
				' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
				Dim rs As ResumableSub = GetUnwatchedVideos
				wait for (rs) complete (Results As Object)
				
				' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
				Dim rs As ResumableSub = GetVideos(response)
				wait for (rs) complete (Results As Object)
				
				TabStrip1.ScrollTo(5,False)
				Sleep(100)
				B4XLoadingIndicator4.Hide
				Return
			End If
		else if Item.Title = "Restart board" Then
			Try
				Dim Result As Int
				Dim bd As BitmapDrawable
				bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
				If TabStrip1.CurrentPage = 2 Then
					Result = Msgbox2("Restart the BASEMENT controller?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) 'ignore
					If Result = DialogResponse.POSITIVE Then
						If MQTT.IsInitialized = False Or MQTT.Connected = False Then
							MQTT_Connect
						End If
						MQTT.Publish("TempHumidBasement", bc.StringToBytes("Restart controller", "utf8"))
					End If
				else If TabStrip1.CurrentPage = 1 Then
					Result = Msgbox2("Restart the AIR QUALITY controller?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) 'ignore
					If Result = DialogResponse.POSITIVE Then
						If MQTT.IsInitialized = False Or MQTT.Connected = False Then
							MQTT_Connect
						End If
						MQTT.Publish("MQ7", bc.StringToBytes("Restart controller", "utf8"))
					End If
				else If TabStrip1.CurrentPage = 3 Then
					Result = Msgbox2("Restart the BASEMENT AIR QUALITY controller?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) 'ignore
					If Result = DialogResponse.POSITIVE Then
						If MQTT.IsInitialized = False Or MQTT.Connected = False Then
							MQTT_Connect
						End If
						MQTT.Publish("MQ7Basement", bc.StringToBytes("Restart controller", "utf8"))
					End If
				Else
					Result = Msgbox2("Restart the WEATHER controller?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) 'ignore
					If Result = DialogResponse.POSITIVE Then
						If MQTT.IsInitialized = False Or MQTT.Connected = False Then
							MQTT_Connect
						End If
						MQTT.Publish("TempHumid", bc.StringToBytes("Restart controller", "utf8"))
					End If
				End If
			Catch
				Log(LastException)
			End Try
		End If
	Catch
		Log(LastException)
	End Try
End Sub

Sub ShowAboutMenu
	Try
		Dim bd As BitmapDrawable
		bd.Initialize(LoadBitmapResize(File.DirAssets, "cloyd.png", 32dip, 32dip, True))
		Dim tempDate As String
		DateTime.DateFormat="EEE, MMM d, yyyy h:mm aa"
		tempDate = DateTime.Date(compileTimeStamp)
		Msgbox2("Smart Home Monitor v" & GetVersionCode & CRLF & CRLF & "Developed by: Cloyd Nino Catanaoan" & CRLF & "Compiled: " & tempDate, "About", "OK", "", "", bd.Bitmap) 'ignore
	Catch
		Log(LastException)
	End Try
End Sub

Sub GetVersionCode() As String
	Dim AppVersion As String
	Try
		Dim pm As PackageManager
		Dim packageName As String
		packageName =  Application.PackageName
		AppVersion = pm.GetVersionName(packageName)
	Catch
		Log(LastException)
	End Try
	Return AppVersion
End Sub

Sub Activity_Createmenu(Menu As ACMenu)
	Try
		Menu.Clear
		gblACMenu = Menu
		Menu.Add(0, 0, "Settings",Null)
		Menu.Add(0, 0, "Refresh video list",Null)
		Menu.Add(0, 0, "Restart Application",Null)
		Menu.Add(0, 0, "Show free memory",Null)
		Menu.Add(0, 0, "About",Null)
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub HidePing
	lblPing.SetVisibleAnimated(200, False)
End Sub

Private Sub HidePingBasement
	lblPingBasement.SetVisibleAnimated(200, False)
End Sub


#If Java

public boolean _onCreateOptionsMenu(android.view.Menu menu) {
    if (processBA.subExists("activity_createmenu")) {
        processBA.raiseEvent2(null, true, "activity_createmenu", false, new de.amberhome.objects.appcompat.ACMenuWrapper(menu));
        return true;
    }
    else
        return false;
}
#End If

Sub TabStrip1_PageSelected (Position As Int)
	Try
		Dim FixedPosition As Int = -1
		If Pages.Get(Position) = False Then
			Dim direction As Int = Position - CurrentPage
			Dim i As Int = Position + direction
			Do While i >= 0 And i < Pages.Size
				If Pages.Get(i) = True Then
					FixedPosition = i
					Exit
				End If
				i = i + direction
			Loop
			If FixedPosition = -1 Then FixedPosition = CurrentPage
		Else
			FixedPosition = Position
		End If
		CurrentPage = FixedPosition
		TabStrip1.ScrollTo(FixedPosition, False)
		If CurrentPage <> Position Then Return
		
		B4XPageIndicator1.CurrentPage = Position
		
		If Position = 0 Then
			If MQTT.IsInitialized And MQTT.Connected  Then
				MQTT.Publish("TempHumid", bc.StringToBytes("Read weather", "utf8"))
			End If
			CheckTempHumiditySetting
		End If
		If Position = 1 Then
			If MQTT.IsInitialized And MQTT.Connected  Then
				MQTT.Publish("MQ7", bc.StringToBytes("Read voltage", "utf8"))
			End If
			CheckAirQualitySetting
		End If
		If Position = 2 Then
			If MQTT.IsInitialized And MQTT.Connected  Then
				MQTT.Publish("TempHumidBasement", bc.StringToBytes("Read weather", "utf8"))
			End If
			CheckTempHumiditySettingBasement
		End If
		If Position = 3 Then
			If MQTT.IsInitialized And MQTT.Connected  Then
				MQTT.Publish("MQ7Basement", bc.StringToBytes("Read voltage", "utf8"))
			End If
			CheckAirQualitySettingBasement
		End If
		If Position = 4 Then
			' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
			Dim rs As ResumableSub = CreateTab4
			wait for (rs) complete (Result As Object)
		End If
		
		' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
		Dim rs As ResumableSub = GetUnwatchedVideos
		wait for (rs) complete (Result As Object)
				
		Dim UnwatchedVideoClips As String = StateManager.GetSetting("UnwatchedVideoClips")
		If IsNumber(UnwatchedVideoClips) Or isThereUnwatchedVideo Then
			If UnwatchedVideoClips > 0 Or isThereUnwatchedVideo Then
				If TabStrip1.CurrentPage <> 5 Then
					TabStrip1.ScrollTo(5,False)
					Sleep(100)
					Return
				End If
				clvActivity.Clear
						
				'Dim rs As ResumableSub = GetUnwatchedVideos
				'wait for (rs) complete (Result As Object)
				
				' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
				Dim rs As ResumableSub = GetVideos(response)
				wait for (rs) complete (Result As Object)
						
				' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
				Dim rs As ResumableSub = GetUnwatchedVideos
				wait for (rs) complete (Result As Object)
				Return
			End If
		End If
			
		If Position = 5 Then
			If clvActivity.Size > 0 Then
				If previousSelectedIndex > (clvActivity.Size-1) Then
					previousSelectedIndex = 0
				End If
				Sleep(100)
				clvActivity.JumpToItem(previousSelectedIndex)
				Sleep(100)
				clvActivity.JumpToItem(previousSelectedIndex)
				Sleep(100)
				Dim p As B4XView = clvActivity.GetPanel(previousSelectedIndex)
				If p.NumberOfViews > 0 Then
					Dim backPane As B4XView = p.getview(0)
					backPane.Color = xui.Color_ARGB(255,217,215,222)
						
					Dim ContentLabel As B4XView = p.GetView(0).GetView(6)
					ContentLabel.Visible = True
				End If
				B4XLoadingIndicator4.Show
				Dim cd As CardData = clvActivity.GetValue(previousSelectedIndex)
				Dim firstvideo As String
				firstvideo = cd.mediaURL
				lblDuration.Text = "0:00"
				ShowVideo(firstvideo)
			Else
				clvActivity.Clear
						
'				Dim rs As ResumableSub = GetUnwatchedVideos
'				wait for (rs) complete (Result As Object)
						
				' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
				Dim rs As ResumableSub = GetVideos(response)
				wait for (rs) complete (Result As Object)
						
				' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
				Dim rs As ResumableSub = GetUnwatchedVideos
				wait for (rs) complete (Result As Object)
			End If
		End If

	Catch
		Log(LastException)
	End Try
End Sub

Sub CreateTab4() As ResumableSub
	Try
		Pages = Array(False, False, False, False, True, False) 'True = Enabled
		'wvMedia.LoadUrl("")
		If lblSideYardBatt.Text = "" Or lblFrontYardBatt.Text = "" Or lblBackyardBatt.Text = "" Or lblStatus.Text.Contains("REST endpoint URL not found") Then
			'ProgressDialogShow2("Getting new camera information...",False)
			btnSideYard.Enabled = False
			btnRefresh.Enabled = False
			btnSideYardNewClip.Enabled = False
			btnFrontYardNewClip.Enabled = False
			btnBackyardNewClip.Enabled = False
			ScrollViewBlink.ScrollToNow(0)
			BlurIV("SideYard.jpg",ivSideYard)
			BlurIV("FrontYard.jpg",ivFrontYard)
			BlurIV("Backyard.jpg",ivBackyard)
			Dim rs As ResumableSub = RefreshCameras(True,"All")
			wait for (rs) complete (Result As Object)
			'ProgressDialogHide
		else If ivSideYard.Bitmap = Null Or ivFrontYard.Bitmap = Null Or ivBackyard.Bitmap = Null Then
			If File.Exists(File.DirInternal, "SideYard.jpg") Then
				bmp = xui.LoadBitmapResize(File.DirInternal, "SideYard.jpg", ivSideYard.Width,ivSideYard.Height, True)
				ivSideYard.Bitmap = bmp
			End If
			If File.Exists(File.DirInternal, "FrontYard.jpg") Then
				bmp = xui.LoadBitmapResize(File.DirInternal, "FrontYard.jpg", ivFrontYard.Width,ivFrontYard.Height, True)
				ivFrontYard.Bitmap = bmp
			End If
			If File.Exists(File.DirInternal, "Backyard.jpg") Then
				bmp = xui.LoadBitmapResize(File.DirInternal, "Backyard.jpg", ivFrontYard.Width,ivFrontYard.Height, True)
				ivBackyard.Bitmap = bmp
			End If
		End If
	Catch
		Log(LastException)
	End Try
	Pages = Array(True, True, True, True, True, True) 'True = Enabled
	Return Null
End Sub

Public Sub GetAllTabLabels (tabstrip As TabStrip) As List
	Dim jo As JavaObject = tabstrip
	Dim r As Reflector
	r.Target = jo.GetField("tabStrip")
	Dim tc As Panel = r.GetField("tabsContainer")
	Dim res As List
	res.Initialize
	For Each v As View In tc
		If v Is Label Then res.Add(v)
	Next
	Return res
End Sub

'This is a modified version of this sub that also checks for panels
Public Sub GetAllTabLabelsForBadge (tabstrip As TabStrip) As List
	Dim jo As JavaObject = tabstrip
	Dim r As Reflector
	r.Target = jo.GetField("tabStrip")
	Dim tc As Panel = r.GetField("tabsContainer")
	Dim res As List
	res.Initialize
	For Each v As View In tc
		If v Is Label Then res.Add(v)
		If v.Tag Is Label Then res.Add(v.Tag)
	Next
	Return res
End Sub

Sub Activity_KeyPress (KeyCode As Int) As Boolean 'ignore
	If KeyCode = KeyCodes.KEYCODE_BACK Then
		If TabStrip1.CurrentPage = 2 Then
			TabStrip1.ScrollTo(1,False)
			TabStrip1_PageSelected(1)
			Return True
		Else If TabStrip1.CurrentPage = 1 Then
			TabStrip1.ScrollTo(0,False)
			TabStrip1_PageSelected(0)
			Return True
		Else If TabStrip1.CurrentPage = 3 Then
			TabStrip1.ScrollTo(2,False)
			TabStrip1_PageSelected(2)
			Return True
		Else If TabStrip1.CurrentPage = 4 Then
			TabStrip1.ScrollTo(3,False)
			TabStrip1_PageSelected(3)
			Return True
		Else If TabStrip1.CurrentPage = 5 Then
			TabStrip1.ScrollTo(4,False)
			TabStrip1_PageSelected(4)
			Return True
		Else If TabStrip1.CurrentPage = 6 Then
			TabStrip1.ScrollTo(5,False)
			TabStrip1_PageSelected(5)
			Return True
		End If
	End If
	
End Sub

Sub CheckAirQualitySetting
	Dim cs As CSBuilder
	cs.Initialize
	Try
		Dim status As String
		status = StateManager.GetSetting("AirQuality")
		status = status.Replace("|24:","|00:")
		Dim a() As String = Regex.Split("\|",status)
		If a.Length = 3 Then
			If IsNumber(a(0)) And a(0) > 0 Then
				GaugeAirQuality.CurrentValue = (a(0)/10)
				If (a(0)/10) > 40 Then
					lblAirQuality.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Color(Colors.Red).Append(GetAirQuality((a(0)/10))).PopAll
				Else
					lblAirQuality.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Append(GetAirQuality((a(0)/10))).PopAll
				End If
				If a(1) = "" Then
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(1) = DateTime.Date(Tomorrow)
				End If
				If a(2).Contains("|24:") Then
					a(2) = a(2).Replace("|24:","|00:")
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(2) = DateTime.Date(Tomorrow)
				End If
				DateTime.DateFormat = "yy-MM-dd HH:mm:ss z"
				Dim ticks As Long = DateTime.DateParse(a(1) & " " & a(2) & " GMT")
				DateTime.DateFormat = "MMM d, yyyy h:mm:ss a z"
				Dim lngTicks As Long = ticks
				Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
				'Log("AirQuality Time difference: " & p.Minutes & " minutes" & p.Seconds & " seconds")
				If p.Minutes > = 5 Then
					lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(DateTime.Date(lngTicks)).PopAll
				Else
					lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append(DateTime.Date(lngTicks)).PopAll
				End If
			Else If a(2) = "00:00:00" Then
				lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(lblAirQualityLastUpdate.Text.Replace("Last update: ","")).PopAll
			End If
		End If
	Catch
		Log(LastException)
		lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Exception: ").Pop.Color(Colors.Red).Append(LastException).PopAll
	End Try
End Sub

Sub CheckAirQualitySettingBasement
	Dim cs As CSBuilder
	cs.Initialize
	Try
		Dim status As String
		status = StateManager.GetSetting("AirQualityBasement")
		status = status.Replace("|24:","|00:")
		Dim a() As String = Regex.Split("\|",status)
		If a.Length = 3 Then
			If IsNumber(a(0)) And a(0) > 0 Then
				GaugeAirQualityBasement.CurrentValue = (a(0)/10)
				If (a(0)/10) > 40 Then
					lblAirQualityBasement.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Color(Colors.Red).Append(GetAirQuality((a(0)/10))).PopAll
				Else
					lblAirQualityBasement.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Append(GetAirQuality((a(0)/10))).PopAll
				End If
				If a(1) = "" Then
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(1) = DateTime.Date(Tomorrow)
				End If
				If a(2).Contains("|24:") Then
					a(2) = a(2).Replace("|24:","|00:")
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(2) = DateTime.Date(Tomorrow)
				End If
				
				DateTime.DateFormat = "yy-MM-dd HH:mm:ss z"
				Dim ticks As Long = DateTime.DateParse(a(1) & " " & a(2) & " GMT")
				DateTime.DateFormat = "MMM d, yyyy h:mm:ss a z"
				Dim lngTicks As Long = ticks
				Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
				'Log("AirQuality Time difference: " & p.Minutes & " minutes" & p.Seconds & " seconds")
				If p.Minutes > = 5 Then
					lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(DateTime.Date(lngTicks)).PopAll
				Else
					lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append(DateTime.Date(lngTicks)).PopAll
				End If
			Else If a(2) = "00:00:00" Then
				lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(lblAirQualityLastUpdateBasement.Text.Replace("Last update: ","")).PopAll
			End If
		End If
	Catch
		Log(LastException)
		lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Exception: ").Pop.Color(Colors.Red).Append(LastException).PopAll
	End Try
End Sub

Sub CheckTempHumiditySetting
	Dim cs As CSBuilder
	cs.Initialize
	Try
		Dim status As String
		status = StateManager.GetSetting("TempHumidity")
		status = status.Replace("|24:","|00:")
		Dim a() As String = Regex.Split("\|",status)
		If a.Length = 9 Then
			Dim cs As CSBuilder
			cs.Initialize
			If a(0) = "OK" And a(1) > 0 Then
				GaugeTemp.CurrentValue = a(1)
				GaugeHumidity.CurrentValue = a(2)
				lblPerception.Text = cs.Initialize.Bold.Append("Human Perception: ").Pop.Append(GetPerception(a(3))).PopAll
				If a(4) = 2 Or a(4) = 6 Or a(4) = 10 Then
					lblComfort.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Color(Colors.Blue).Append(GetComfort(a(4))).PopAll
				else If a(4) = 0 Then
					lblComfort.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Append(GetComfort(a(4))).PopAll
				Else
					lblComfort.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Color(Colors.Red).Append(GetComfort(a(4))).PopAll
				End If
				
				GaugeHeatIndex.CurrentValue = a(5)
				GaugeDewPoint.CurrentValue = a(6)
				If a(7) = "" Then
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(7) = DateTime.Date(Tomorrow)
				End If
				If a(8).Contains("|24:") Then
					a(8) = a(8).Replace("|24:","|00:")
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(7) = DateTime.Date(Tomorrow)
				End If
				DateTime.DateFormat = "yy-MM-dd HH:mm:ss z"
				Dim ticks As Long = DateTime.DateParse(a(7) & " " & a(8) & " GMT")
				DateTime.DateFormat = "MMM d, yyyy h:mm:ss a z"
				Dim lngTicks As Long = ticks
				Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
				'Log("TempHumidity Time difference: " & p.Hours & ":" & p.Minutes & " minutes")
				If p.Minutes > = 5 Then
					lblLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(DateTime.Date(lngTicks)).PopAll
				Else
					lblLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append(DateTime.Date(lngTicks)).PopAll
				End If
			Else If a(8) = "00:00:00" Then
				lblLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(lblLastUpdate.Text.Replace("Last update: ","")).PopAll
			End If
		End If
	Catch
		Log(LastException)
		lblLastUpdate.Text = cs.Initialize.Bold.Append("Exception: ").Pop.Color(Colors.Red).Append(LastException).PopAll
	End Try
End Sub

Sub CheckTempHumiditySettingBasement
	Dim cs As CSBuilder
	cs.Initialize
	Try
		Dim status As String
		status = StateManager.GetSetting("TempHumidityBasement")
		status = status.Replace("|24:","|00:")
		Dim a() As String = Regex.Split("\|",status)
		If a.Length = 9 Then
			Dim cs As CSBuilder
			cs.Initialize
			If a(0) = "OK" And a(1) > 0 Then
				GaugeTempBasement.CurrentValue = a(1)
				GaugeHumidityBasement.CurrentValue = a(2)
				lblPerceptionBasement.Text = cs.Initialize.Bold.Append("Human Perception: ").Pop.Append(GetPerception(a(3))).PopAll
				If a(4) = 2 Or a(4) = 6 Or a(4) = 10 Then
					lblComfortBasement.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Color(Colors.Blue).Append(GetComfort(a(4))).PopAll
				else If a(4) = 0 Then
					lblComfortBasement.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Append(GetComfort(a(4))).PopAll
				Else
					lblComfortBasement.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Color(Colors.Red).Append(GetComfort(a(4))).PopAll
				End If
				GaugeHeatIndexBasement.CurrentValue = a(5)
				GaugeDewPointBasement.CurrentValue = a(6)
				If a(7) = "" Then
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(7) = DateTime.Date(Tomorrow)
				End If
				If a(8).Contains("|24:") Then
					a(8) = a(8).Replace("|24:","|00:")
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(7) = DateTime.Date(Tomorrow)
				End If
				DateTime.DateFormat = "yy-MM-dd HH:mm:ss z"
				Dim ticks As Long = DateTime.DateParse(a(7) & " " & a(8) & " GMT")
				DateTime.DateFormat = "MMM d, yyyy h:mm:ss a z"
				Dim lngTicks As Long = ticks
				Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
				'Log("TempHumidity Time difference: " & p.Hours & ":" & p.Minutes & " minutes")
				If p.Minutes > = 5 Then
					lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(DateTime.Date(lngTicks)).PopAll
				Else
					lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append(DateTime.Date(lngTicks)).PopAll
				End If
			Else If a(8) = "00:00:00" Then
				lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(lblLastUpdateBasement.Text.Replace("Last update: ","")).PopAll
			End If
		End If
	Catch
		Log(LastException)
		lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Exception: ").Pop.Color(Colors.Red).Append(LastException).PopAll
	End Try
End Sub

Sub CreatePreferenceScreen
	screen.Initialize("Settings", "")
	'create two categories
	Dim cat1,cat2,cat3 As AHPreferenceCategory
	
	cat1.Initialize("Temperature & Humidity")
	cat1.AddEditText("HumidityAddValue", "Humidity Additional Value", "Value to be added to humidity to improve accuracy", "6","")
	
	cat2.Initialize("Special Settings")
	Dim In As Intent
	In.Initialize("android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS", "")
	cat2.AddIntent("Notification Access", "Enable or disable listening to notifications", In, Null)
	
	cat3.Initialize("Sensors")
	cat3.AddEditText("SensorNotRespondingTime", "Sensor Not Responding", "Data age when to restart sensor", "10","")
	
	screen.AddPreferenceCategory(cat2)
	screen.AddPreferenceCategory(cat1)
	screen.AddPreferenceCategory(cat3)
	StateManager.SetSetting("HumidityAddValue","6")
	StateManager.SetSetting("SensorNotRespondingTime","10")
	StateManager.SaveSettings
End Sub


Sub SetDefaults
	'defaults are only set on the first run.
	manager.SetString("HumidityAddValue", "6")
	manager.SetString("SensorNotRespondingTime", "10")
	StateManager.SetSetting("HumidityAddValue","6")
	StateManager.SetSetting("SensorNotRespondingTime","10")
	StateManager.SaveSettings
End Sub

Sub HandleSettings
	StateManager.SetSetting("HumidityAddValue",manager.GetString("HumidityAddValue"))
	StateManager.SetSetting("SensorNotRespondingTime",manager.GetString("SensorNotRespondingTime"))
	StateManager.SaveSettings
End Sub

Sub RequestAuthToken As ResumableSub
	' https://github.com/MattTW/BlinkMonitorProtocol
	' http://www.basic4ppc.com:51042/json/index.html
	' https://www.b4x.com/android/forum/threads/b4x-okhttputils2-with-wait-for.79345/#content
	' https://www.b4x.com/android/forum/threads/call-api-rest.89470/#content
	' https://www.b4x.com/android/forum/threads/server-online-json-tree-example.39048/#content
	Try
		lblStatus.Text = "Authenticating..."
		Dim jobLogin As HttpJob
		jobLogin.Initialize("", Me)
		jobLogin.PostString("https://rest-prod.immedia-semi.com/api/v4/account/login","email=" &  emailAddress & "&password=" & password)
		jobLogin.GetRequest.SetContentType("application/x-www-form-urlencoded")
		jobLogin.GetRequest.SetHeader("User-Agent",RandomString(12)) '"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36")
		Wait For (jobLogin) JobDone(jobLogin As HttpJob)
		If jobLogin.Success Then
			lblStatus.Text = "Successfully logged in to the Blink server..."
			GetAuthInfo(jobLogin.GetString)
			
'			If TwoClientFAVerificationRequired Then
'				Dim input As B4XInputTemplate
'				Dim diagResult As Int
'				input.Initialize
'				input.lblTitle.Text = "Enter verification code:"
'				input.ConfigureForNumbers(False, False) 'AllowDecimals, AllowNegative
'				Wait For (dialog.ShowTemplate(input, "OK", "", "CANCEL")) Complete (diagResult As Int)
'				If diagResult = xui.DialogResponse_Positive Then
'					Dim res As Int = input.Text 'no need to check with IsNumber
'					Log(res)
'					jobLogin.PostString("https://rest-u006.immedia-semi.com/api/v4/account/88438/client/" & TwoFAClientID & "/pin/verify/","pin=" & res)
'					jobLogin.GetRequest.SetContentType("application/x-www-form-urlencoded")
'					Wait For (jobLogin) JobDone(jobLogin As HttpJob)
'					If jobLogin.Success = False Then
'						lblStatus.Text = GetRESTError(jobLogin.ErrorMessage)
'						Log("2FA error: " & jobLogin.ErrorMessage)
'						jobLogin.Release
'						Return Null
'					End If
'				End If
'			End If

			If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
				btnSideYard.Enabled = True
				btnRefresh.Enabled = True
				btnSideYardNewClip.Enabled = True
				btnFrontYardNewClip.Enabled = True
				btnBackyardNewClip.Enabled = True
				btnSideYardRefresh.Enabled = True
				btnFrontYardRefresh.Enabled = True
				btnBackyardRefresh.Enabled = True
				swArmed.Enabled = True
				jobLogin.Release
				Return Null
			Else
				lblStatus.Text = "Authtoken acquired..."
			End If
		Else
			lblStatus.Text = GetRESTError(jobLogin.ErrorMessage)
			Log("RequestAuthToken error: " & jobLogin.ErrorMessage)
			jobLogin.Release
			Return Null
		End If
		jobLogin.Release
	Catch
		Log("RequestAuthToken LastException: " & LastException)
	End Try
	Return Null
End Sub

Sub RefreshCameras(FirstRun As Boolean, whatCamera As String) As ResumableSub
	Try
		Dim camera As String
		Dim iv As ImageView
		Dim links As List
		Dim attempts As Int
		links = Array("347574", "236967", "458236")
		
		Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/syncmodules")
		wait for (rs) complete (Result As Object)
		
		If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
			btnSideYard.Enabled = True
			btnRefresh.Enabled = True
			btnSideYardNewClip.Enabled = True
			btnFrontYardNewClip.Enabled = True
			btnBackyardNewClip.Enabled = True
			btnSideYardRefresh.Enabled = True
			btnFrontYardRefresh.Enabled = True
			btnBackyardRefresh.Enabled = True
			swArmed.Enabled = True
			Return Null
		End If
		
		Dim rs As ResumableSub = GetSyncModuleInfo(response)
		wait for (rs) complete (Result As Object)
		
		'Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/homescreen")
		Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/api/v3/accounts/88438/homescreen")
		wait for (rs) complete (Result As Object)
		If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
			btnSideYard.Enabled = True
			btnRefresh.Enabled = True
			btnSideYardNewClip.Enabled = True
			btnFrontYardNewClip.Enabled = True
			btnBackyardNewClip.Enabled = True
			btnSideYardRefresh.Enabled = True
			btnFrontYardRefresh.Enabled = True
			btnBackyardRefresh.Enabled = True
			swArmed.Enabled = True
			'If response.Contains("An app update is required") = False Then <-- THIS MEANS THERE IS AN UPDATED ENDPOINT OR WEB CALL
			Return Null
			'End If
		End If
		
		Dim rs As ResumableSub = GetHomescreen(response)
		wait for (rs) complete (Result As Object)
		
		' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
		Dim rs As ResumableSub = GetUnwatchedVideos
		wait for (rs) complete (Result As Object)
		
		lblSideYardBatt.Visible = True
		lblSideYardTimestamp.Visible = True
		lblSideYardWifi.Visible = True
		lblSideYard.Visible = True
		lblFrontYardBatt.Visible = True
		lblFrontYardTimestamp.Visible = True
		lblFrontYardWiFi.Visible = True
		lblFrontYard.Visible = True
		lblBackyardBatt.Visible = True
		lblBackyardTimestamp.Visible = True
		lblBackyardWiFi.Visible = True
		lblBackyard.Visible = True
		
		For Each link As String In links
			camera = link
			If camera <> whatCamera And whatCamera <> "All" Then
				Continue
			End If
			If FirstRun Then
				If camera = "347574" Then
					lblStatus.Text = "Retrieving Side Yard thumbnail..."
					iv = ivSideYard
				Else If camera = "236967" Then
					lblStatus.Text = "Retrieving Front Yard thumbnail..."
					iv = ivFrontYard
				Else If camera = "458236" Then
					lblStatus.Text = "Retrieving Backyard thumbnail..."
					iv = ivBackyard
				End If
			Else
				If camera = "347574" Then
					lblStatus.Text = "Capturing a new Side Yard thumbnail..."
					iv = ivSideYard
					attempts = 15
				Else If camera = "236967" Then
					lblStatus.Text = "Capturing a new Front Yard thumbnail..."
					iv = ivFrontYard
					attempts = 15
				Else If camera = "458236" Then
					lblStatus.Text = "Capturing a new Backyard thumbnail..."
					iv = ivBackyard
					attempts = 15
				End If
			End If

			If FirstRun Then
				Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera)
				wait for (rs) complete (Result As Object)
				
				Dim rs As ResumableSub = GetCameraInfo(response, False)
				wait for (rs) complete (Result As Object)
				
				Dim rs As ResumableSub = DownloadImage("https://rest-" & userRegion &".immedia-semi.com/" & cameraThumbnail & ".jpg",iv, camera)
				wait for (rs) complete (Result As Object)
			Else
				Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera)
				wait for (rs) complete (Result As Object)
				
				Dim rs As ResumableSub = GetCameraInfo(response,True)
				wait for (rs) complete (Result As Object)
				
				prevCameraThumbnail = cameraThumbnail
				
				Dim rs As ResumableSub = RESTPost("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera & "/thumbnail")
				wait for (rs) complete (Result As Object)
				If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
					btnSideYard.Enabled = True
					btnRefresh.Enabled = True
					btnSideYardNewClip.Enabled = True
					btnFrontYardNewClip.Enabled = True
					btnBackyardNewClip.Enabled = True
					btnSideYardRefresh.Enabled = True
					btnFrontYardRefresh.Enabled = True
					btnBackyardRefresh.Enabled = True
					swArmed.Enabled = True
					Return Null
				Else
					Dim rs As ResumableSub = GetCommandID(response)
					wait for (rs) complete (Result As Object)
					
					Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
					wait for (rs) complete (Result As Object)
					
					If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
						btnSideYard.Enabled = True
						btnRefresh.Enabled = True
						btnSideYardNewClip.Enabled = True
						btnFrontYardNewClip.Enabled = True
						btnBackyardNewClip.Enabled = True
						btnSideYardRefresh.Enabled = True
						btnFrontYardRefresh.Enabled = True
						btnBackyardRefresh.Enabled = True
						swArmed.Enabled = True
						Return Null
					Else
						Dim reChecked As Boolean
						For i = 1 To attempts
							' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
							Dim rs As ResumableSub = GetCommandResponse(iv,camera, i, attempts)
							wait for (rs) complete (Result As Object)
							If Result Then Exit
							
							Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
							wait for (rs) complete (Result As Object)
							Sleep(1000) ' 1 second

							If i = attempts And reChecked = False Then
								reChecked = True
								Log("*********** HERE *********** i = " & i)
								Dim rs As ResumableSub = RESTPost("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera & "/thumbnail")
								wait for (rs) complete (Result As Object)
								
								If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
									btnSideYard.Enabled = True
									btnRefresh.Enabled = True
									btnSideYardNewClip.Enabled = True
									btnFrontYardNewClip.Enabled = True
									btnBackyardNewClip.Enabled = True
									btnSideYardRefresh.Enabled = True
									btnFrontYardRefresh.Enabled = True
									btnBackyardRefresh.Enabled = True
									swArmed.Enabled = True
									Return Null
								Else
									i = 1
								End If
								Log("*********** HERE TWO ***********")
								Dim rs As ResumableSub = GetCommandID(response)
								wait for (rs) complete (Result As Object)
					
								Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
								wait for (rs) complete (Result As Object)
							End If
						Next
						If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
							btnSideYard.Enabled = True
							btnRefresh.Enabled = True
							btnSideYardNewClip.Enabled = True
							btnFrontYardNewClip.Enabled = True
							btnBackyardNewClip.Enabled = True
							btnSideYardRefresh.Enabled = True
							btnFrontYardRefresh.Enabled = True
							btnBackyardRefresh.Enabled = True
							swArmed.Enabled = True
							Return Null
						else If commandComplete = False Then
							If camera = "347574" Then
								lblStatus.Text = "Failed to retrieve Side Yard thumbnail..."
							Else If camera = "236967" Then
								lblStatus.Text = "Failed to retrieve Front Yard thumbnail..."
							Else If camera = "458236" Then
								lblStatus.Text = "Failed to retrieve Backyard thumbnail..."
							End If
						Else
							' Completed
						End If
					End If
				End If
			End If
		Next
		
		lblStatus.Text = "Ready"
	Catch
		Log("RefreshCamera LastException: " & LastException)
	End Try
	btnSideYard.Enabled = True
	btnRefresh.Enabled = True
	btnSideYardNewClip.Enabled = True
	btnFrontYardNewClip.Enabled = True
	btnBackyardNewClip.Enabled = True
	btnSideYardRefresh.Enabled = True
	btnFrontYardRefresh.Enabled = True
	btnBackyardRefresh.Enabled = True
	swArmed.Enabled = True
	If lblBackyardBatt.Text.Contains("OFFLINE") Then
		'lblBackyardBatt.Text = BackyardBattStatus
		BlurIV("Backyard.jpg",ivBackyard)
	Else if lblSideYardBatt.Text.Contains("OFFLINE") Then
		'lblSideYardBatt.Text = SideYardBattStatus
		BlurIV("SideYard.jpg",ivSideYard)
	Else if lblFrontYardBatt.Text.Contains("OFFLINE") Then
		'lblFrontYardBatt.Text = FrontYardBattStatus
		BlurIV("FrontYard.jpg",ivFrontYard)
	End If
	Return Null
End Sub

Sub GetCommandResponse(iv As ImageView,camera As String, attempts As String, attemptsAllowed As String) As ResumableSub
	GetCommandStatus(response)
	If commandComplete Then
		
		Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera)
		wait for (rs) complete (Result As Object)
		
		Dim rs As ResumableSub = GetCameraInfo(response,False)
		wait for (rs) complete (Result As Object)
		
		Dim rs As ResumableSub = DownloadImage("https://rest-" & userRegion &".immedia-semi.com/" & cameraThumbnail & ".jpg",iv,camera)
		wait for (rs) complete (Result As Object)
		Return True
	End If
		
	Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera)
	wait for (rs) complete (Result As Object)
				
	Dim rs As ResumableSub = GetCameraInfo(response,True)
	wait for (rs) complete (Result As Object)
	
	If prevCameraThumbnail <> "" And prevCameraThumbnail <> cameraThumbnail Then
		Log("**** ALRIGHT " & attempts & "/" & attemptsAllowed & " *****")
		Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera)
		wait for (rs) complete (Result As Object)
		
		Dim rs As ResumableSub = GetCameraInfo(response,False)
		wait for (rs) complete (Result As Object)
		
		Dim rs As ResumableSub = DownloadImage("https://rest-" & userRegion &".immedia-semi.com/" & cameraThumbnail & ".jpg",iv,camera)
		wait for (rs) complete (Result As Object)
		Return True
	Else
		If camera = "347574" Then
			lblStatus.Text = "Awaiting for the Side Yard thumbnail... " & attempts & "/" & attemptsAllowed
		Else If camera = "236967" Then
			lblStatus.Text = "Awaiting for the Front Yard thumbnail...  " & attempts & "/" & attemptsAllowed
		Else If camera = "458236" Then
			lblStatus.Text = "Awaiting for the Backyard thumbnail... " & attempts & "/" & attemptsAllowed
		End If
		Return False
	End If
End Sub

Sub RESTGet(url As String) As ResumableSub
	Try
		Dim j As HttpJob
		response = ""
		j.Initialize("", Me) 'name is empty as it is no longer needed
		j.Download(url)
		j.GetRequest.SetHeader("TOKEN_AUTH", authToken)
		Wait For (j) JobDone(j As HttpJob)
		If j.Success Then
			response = j.GetString
		Else
			response = "ERROR: " & j.ErrorMessage
			lblStatus.Text = GetRESTError(j.ErrorMessage)
		End If
		If response.Contains("System is busy, please wait") Then
			lblStatus.Text = "System is busy, please wait"
		End If
		j.Release
	Catch
		response = "ERROR: " & LastException
		Log("RESTDownload LastException: " & LastException)
	End Try
	Log("URL: " & url)
	Log("Response: " & response)
	Return(response)
End Sub

Sub RESTPost(url As String) As ResumableSub
	Try
		Dim j As HttpJob
		response = ""
		j.Initialize("", Me) 'name is empty as it is no longer needed
		j.PostString(url,"")
		j.GetRequest.SetContentType("application/x-www-form-urlencoded")
		j.GetRequest.SetHeader("TOKEN_AUTH", authToken)
		Wait For (j) JobDone(j As HttpJob)
		If j.Success Then
			response = j.GetString
		Else
			response = "ERROR: " & j.ErrorMessage
			lblStatus.Text = GetRESTError(j.ErrorMessage)
		End If
		If response.Contains("System is busy, please wait") Then
			lblStatus.Text = "System is busy, please wait"
		End If
		j.Release
	Catch
		response = "ERROR: " & LastException
		Log("RESTPost LastException: " & LastException)
	End Try
	Log("URL: " & url)
	Log("Response: " & response)
	Return(response)
End Sub

Sub DownloadImage (Link As String, iv As ImageView, camera As String) As ResumableSub'ignore
	Try
		Dim j As HttpJob
		response = ""
		j.Initialize("", Me)
		j.Download(Link)
		j.GetRequest.SetHeader("TOKEN_AUTH", authToken)
		Wait For (j) JobDone(j As HttpJob)
		If j.Success Then
			' Save to a JPG file
			If camera = "347574" Then
				Dim out As OutputStream = File.OpenOutput(File.DirInternal, "SideYard.jpg", False)
				File.Copy2(j.GetInputStream, out)
				out.Close '<------ very important
				bmp = j.GetBitmapResize(iv.Width, iv.Height,True) ' 10% of 1440x810 192dip,108dip
			Else If camera = "236967" Then
				Dim out As OutputStream = File.OpenOutput(File.DirInternal, "FrontYard.jpg", False)
				File.Copy2(j.GetInputStream, out)
				out.Close '<------ very important
				bmp = j.GetBitmapResize(iv.Width, iv.Height,True) ' 10% of 1440x810 192dip,108dip
			Else If camera = "458236" Then
				Dim out As OutputStream = File.OpenOutput(File.DirInternal, "Backyard.jpg", False)
				File.Copy2(j.GetInputStream, out)
				out.Close '<------ very important
				bmp = j.GetBitmapResize(iv.Width, iv.Height,True) ' 10% of 1440x810 192dip,108dip
			End If
			iv.Bitmap = bmp
		Else
			response = "ERROR: " & j.ErrorMessage
			lblStatus.Text = GetRESTError(j.ErrorMessage)
		End If
		j.Release
	Catch
		Log(LastException)
	End Try
	Return Null
End Sub

Sub GetAuthInfo(json As String)
	Try
		lblStatus.Text = "Getting authtoken..."
'		Dim parser As JSONParser
'		parser.Initialize(json)
'		Dim root As Map = parser.NextObject
'		Dim authtokenmap As Map = root.Get("authtoken")
'		authToken = authtokenmap.Get("authtoken")
'		Log("authToken: " &  authToken)
'		Dim networks As Map = root.Get("networks")
'		Log("networkID: " & networks.GetKeyAt(0))
'		networkID = networks.GetKeyAt(0)
'		Dim region As Map = root.Get("region")
'		userRegion = region.GetKeyAt(0)
'		Log("userRegion: " &  userRegion)
'
'		Dim account As Map = root.Get("account")
'		Dim id As Int = account.Get("id")
'		Log("accountID: " & id)
'		accountID = id
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		Dim force_password_reset As String = root.Get("force_password_reset") 'ignore
		Dim lockout_time_remaining As Int = root.Get("lockout_time_remaining") 'ignore
		Dim authtokenmap As Map = root.Get("authtoken")
		authToken = authtokenmap.Get("authtoken")
		Dim message As String = authtokenmap.Get("message") 'ignore
		Dim client As Map = root.Get("client")
		TwoClientFAVerificationRequired = client.Get("verification_required")
		TwoFAClientID = client.Get("id")
		Dim allow_pin_resend_seconds As Int = root.Get("allow_pin_resend_seconds") 'ignore
		Dim region As Map = root.Get("region")
		Dim code As String = region.Get("code") 'ignore
		userRegion = region.Get("tier")
		Dim description As String = region.Get("description") 'ignore
		Dim account As Map = root.Get("account")
		Dim verification_required As String = account.Get("verification_required") 'ignore
		Dim id As Int = account.Get("id") 'ignore
	Catch
		lblStatus.Text = "ERROR: GetAuthInfo - " & LastException
		response = "ERROR: GetAuthInfo - " & LastException
		Log(LastException)
	End Try

End Sub


Sub GetCommandID(json As String) As ResumableSub
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
'	Dim server As String = root.Get("server")
'	Dim stage_vs As String = root.Get("stage_vs")
'	Dim firmware_id As String = root.Get("firmware_id")
'	Dim stage_rest As String = root.Get("stage_rest")
'	Dim created_at As String = root.Get("created_at")
'	Dim stage_cs_db As String = root.Get("stage_cs_db")
'	Dim sm_ack As String = root.Get("sm_ack")
'	Dim duration As String = root.Get("duration")
'	Dim stage_is As String = root.Get("stage_is")
'	Dim stage_cs_sent As String = root.Get("stage_cs_sent")
'	Dim updated_at As String = root.Get("updated_at")
'	Dim stage_dev As String = root.Get("stage_dev")
'	Dim execute_time As String = root.Get("execute_time")
'	Dim by_whom As String = root.Get("by_whom")
		commandID = root.Get("id")
		Log("commandID: " & commandID)
'	Dim diagnostic As String = root.Get("diagnostic")
'	Dim player_transaction As String = root.Get("player_transaction")
'	Dim attempts As Int = root.Get("attempts")
'	Dim lfr_ack As String = root.Get("lfr_ack")
'	Dim stage_sm As String = root.Get("stage_sm")
'	Dim debug As String = root.Get("debug")
'	Dim state_stage As String = root.Get("state_stage")
'	Dim camera_id As Int = root.Get("camera_id")
'	Dim target_id As Int = root.Get("target_id")
'	Dim command As String = root.Get("command")
'	Dim target As String = root.Get("target")
'	Dim stage_lv As String = root.Get("stage_lv")
'	Dim sequence As String = root.Get("sequence")
'	Dim network_id As Int = root.Get("network_id")
'	Dim account_id As Int = root.Get("account_id")
'	Dim state_condition As String = root.Get("state_condition")
'	Dim siren_id As String = root.Get("siren_id")
'	Dim parent_command_id As String = root.Get("parent_command_id")
'	Dim sync_module_id As Int = root.Get("sync_module_id")
'	Dim transaction As String = root.Get("transaction")
	Catch
		Log(LastException)
		'ToastMessageShow("GetCommandID: " & LastException, False)
	End Try
	Return Null
End Sub

Sub GetCommandStatus(json As String) As ResumableSub
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		commandComplete = root.Get("complete")
		Log("commandComplete: " & commandComplete)
	Catch
		Log(LastException)
		'ToastMessageShow("GetCommandStatus: " & LastException,False)
	End Try
	Return Null
End Sub

Sub GetRESTError(json As String) As String
	Try
		'ResponseError. Reason: , Response: {"message":"Unauthorized Access","code":101}
		'Code: 101 Message: Unauthorized Access
		'ResponseError. Reason: , Response: {"message":"Invalid credentials","code":200}
		'RequestAuthToken LastException: (FileNotFoundException) java.io.FileNotFoundException: /data/user/0/cloyd.smart.home.monitor/cache/1 (No such file or directory)
		'ResponseError. Reason: , Response: <h1>Not Found</h1>
		If json.Contains("<h1>Not Found</h1>") Then
			Return "REST endpoint URL not found. Try again."
		Else
			If json.IndexOf("{") <> -1 Then
				json = json.SubString(json.IndexOf("{"))
				Dim parser As JSONParser
				parser.Initialize(json)
				Dim root As Map = parser.NextObject
				Dim code As Int = root.Get("code")
				Dim message As String = root.Get("message")
				Log("Code: " & code & " Message: " & message)
				Return "Code: " & code & " Message: " & message
			Else
				Return json
			End If
		End If
	Catch
		Log(LastException)
		'ToastMessageShow("GetRESTError: " & LastException,False)
		Return json
	End Try
End Sub

Sub GetCameraInfo(json As String, isJustInfoNeeded As Boolean) As ResumableSub
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		Dim camera_status As Map = root.Get("camera_status")
'		Dim total_108_wakeups As Int = camera_status.Get("total_108_wakeups")
		Dim battery_voltage As Int = camera_status.Get("battery_voltage")
'		Dim light_sensor_data_valid As String = camera_status.Get("light_sensor_data_valid")
'		Dim lfr_tb_wakeups As Int = camera_status.Get("lfr_tb_wakeups")
'		Dim fw_git_hash As String = camera_status.Get("fw_git_hash")
		Dim wifi_strength As Int = camera_status.Get("wifi_strength")
'		Dim lfr_strength As Int = camera_status.Get("lfr_strength")
'		Dim total_tb_wakeups As Int = camera_status.Get("total_tb_wakeups")
'		Dim created_at As String = camera_status.Get("created_at")
'		Dim light_sensor_ch0 As Int = camera_status.Get("light_sensor_ch0")
'		Dim mac As String = camera_status.Get("mac")
'		Dim unit_number As Int = camera_status.Get("unit_number")
		Dim updated_at As String = camera_status.Get("updated_at")
'		Dim light_sensor_ch1 As Int = camera_status.Get("light_sensor_ch1")
'		Dim time_dhcp_lease As Int = camera_status.Get("time_dhcp_lease")
		Dim temperature As String = camera_status.Get("temperature")
'		Dim time_first_video As Int = camera_status.Get("time_first_video")
'		Dim time_dns_resolve As Int = camera_status.Get("time_dns_resolve")
'		Dim id As Int = camera_status.Get("id")
'		Dim temp_alert_status As String = camera_status.Get("temp_alert_status")
'		Dim time_108_boot As Int = camera_status.Get("time_108_boot")
'		Dim lfr_108_wakeups As Int = camera_status.Get("lfr_108_wakeups")
		cameraThumbnail = camera_status.Get("thumbnail")
'		Dim lifetime_duration As Int = camera_status.Get("lifetime_duration")
'		Dim wifi_connect_failure_count As Int = camera_status.Get("wifi_connect_failure_count")
		Dim camera_id As Int = camera_status.Get("camera_id")
'		Dim battery_alert_status As String = camera_status.Get("battery_alert_status")
'		Dim dhcp_failure_count As Int = camera_status.Get("dhcp_failure_count")
'		Dim ip_address As String = camera_status.Get("ip_address")
'		Dim ipv As String = camera_status.Get("ipv")
'		Dim light_sensor_data_new As String = camera_status.Get("light_sensor_data_new")
'		Dim network_id As Int = camera_status.Get("network_id")
'		Dim account_id As Int = camera_status.Get("account_id") '88438
'		Dim serial As String = camera_status.Get("serial")
'		Dim dev_1 As Int = camera_status.Get("dev_1")
'		Dim time_wlan_connect As Int = camera_status.Get("time_wlan_connect")
'		Dim dev_2 As Int = camera_status.Get("dev_2")
'		Dim socket_failure_count As Int = camera_status.Get("socket_failure_count")
'		Dim dev_3 As Int = camera_status.Get("dev_3")
'		Dim pir_rejections As Int = camera_status.Get("pir_rejections")
'		Dim sync_module_id As Int = camera_status.Get("sync_module_id")
'		Dim lifetime_count As Int = camera_status.Get("lifetime_count")
'		Dim error_codes As Int = camera_status.Get("error_codes")
		Dim fw_version As String = camera_status.Get("fw_version")
'		Dim ac_power As String = camera_status.Get("ac_power")

'		Dim strTimestamp As String
'		strTimestamp = ConvertDateTime(updated_at)
'		lblStatus.Text = "Last updated: " & strTimestamp

		If isJustInfoNeeded Then Return Null

		If camera_id = "347574" Then
			lblSideYardBatt.Text = NumberFormat2((battery_voltage / 100),0,2,2,False) & "V " & SideYardBattStatus
			lblSideYardTimestamp.Text = ConvertDateTime(updated_at)
			lblSideYard.Text = "Side Yard v" & fw_version & " " & SideYardArmedStatus
			If CheckLFRLevel(wifi_strength) = "Very good" Then
				lblSideYardWifi.Text = " |  " & temperature & "°F  |  " & wifi_strength & "dBm - " & CheckLFRLevel(wifi_strength) & " | "
			Else
				lblSideYardWifi.Text = " |  " & temperature & "°F  |  " & wifi_strength & "dBm - " & CheckLFRLevel(wifi_strength) & "  | "
			End If
		Else If camera_id = "236967" Then
			lblFrontYardBatt.Text = NumberFormat2((battery_voltage / 100),0,2,2,False) & "V " & FrontYardBattStatus
			lblFrontYardTimestamp.Text = ConvertDateTime(updated_at)
			lblFrontYard.Text = "Front Yard v" & fw_version  & " " & FrontYardArmedStatus
			If CheckLFRLevel(wifi_strength) = "Very good" Then
				lblFrontYardWiFi.Text = " |  " & temperature & "°F  |  " & wifi_strength & "dBm - " & CheckLFRLevel(wifi_strength) & " | "
			Else
				lblFrontYardWiFi.Text = " |  " & temperature & "°F  |  " & wifi_strength & "dBm - " & CheckLFRLevel(wifi_strength) & "  | "
			End If
		Else If camera_id = "458236" Then
			lblBackyardBatt.Text = NumberFormat2((battery_voltage / 100),0,2,2,False) & "V " & BackyardBattStatus
			lblBackyardTimestamp.Text = ConvertDateTime(updated_at)
			lblBackyard.Text = "Backyard v" & fw_version  & " " & BackyardArmedStatus
			If CheckLFRLevel(wifi_strength) = "Very good" Then
				lblBackyardWiFi.Text = " |  " & temperature & "°F  |  " & wifi_strength & "dBm - " & CheckLFRLevel(wifi_strength) & " | "
			Else
				lblBackyardWiFi.Text = " |  " & temperature & "°F  |  " & wifi_strength & "dBm - " & CheckLFRLevel(wifi_strength) & "  | "
			End If
		End If
		If lblBackyardBatt.Text.Contains("OFFLINE") Then
			lblBackyardBatt.Text = NumberFormat2((battery_voltage / 100),0,2,2,False) & "V " & BackyardBattStatus
		Else if lblSideYardBatt.Text.Contains("OFFLINE") Then
			lblSideYardBatt.Text = NumberFormat2((battery_voltage / 100),0,2,2,False) & "V " & SideYardBattStatus
		Else if lblFrontYardBatt.Text.Contains("OFFLINE") Then
			lblFrontYardBatt.Text = NumberFormat2((battery_voltage / 100),0,2,2,False) & "V " & FrontYardBattStatus
		End If
	Catch
		Log(LastException)
	End Try
	Return Null
End Sub

Sub GetSyncModuleInfo(json As String) As ResumableSub
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		Dim syncmodule As Map = root.Get("syncmodule")
'	Dim onboarded As String = syncmodule.Get("onboarded")
'	Dim server As String = syncmodule.Get("server")
'	Dim feature_plan_id As String = syncmodule.Get("feature_plan_id")
'		Dim wifi_strength As Int = syncmodule.Get("wifi_strength")
'		Dim os_version As String = syncmodule.Get("os_version")
'	Dim created_at As String = syncmodule.Get("created_at")
'	Dim ip_address As String = syncmodule.Get("ip_address")
'	Dim table_update_sequence As Int = syncmodule.Get("table_update_sequence")
'	Dim lfr_frequency As String = syncmodule.Get("lfr_frequency")
'	Dim last_wifi_alert As String = syncmodule.Get("last_wifi_alert")
'	Dim offline_alert_count As Int = syncmodule.Get("offline_alert_count")
'	Dim last_hb As String = syncmodule.Get("last_hb")
'	Dim network_id As Int = syncmodule.Get("network_id")
'	Dim last_activity As String = syncmodule.Get("last_activity")
'	Dim account_id As Int = syncmodule.Get("account_id") '88438
'	Dim updated_at As String = syncmodule.Get("updated_at")
'	Dim serial As String = syncmodule.Get("serial")
'	Dim mac_address As String = syncmodule.Get("mac_address")
'	Dim wifi_alert_count As Int = syncmodule.Get("wifi_alert_count")
'	Dim name As String = syncmodule.Get("name")
'	Dim id As Int = syncmodule.Get("id")
		Dim fw_version As String = syncmodule.Get("fw_version")
'	Dim last_offline_alert As String = syncmodule.Get("last_offline_alert")
		Dim status As String = syncmodule.Get("status")
		Dim jo As JavaObject = lblSyncModule
		Dim radius = 2dip, dx = 0dip, dy = 0dip As Float
		
		If status = "online" Then
			jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Green))
		Else
			jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
		End If
		lblSyncModule.Text = "Sync Module is " & status & CRLF & "Firmware version: " & fw_version
	Catch
		Log(LastException)
	End Try
	Return Null
End Sub

Sub GetHomescreen(json As String) As ResumableSub
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		Dim cameras As List = root.Get("cameras")
'		For Each coldevices As Map In devices
'			Dim battery_state As String = coldevices.Get("battery_state")
		''			Dim thumbnail As String = coldevices.Get("thumbnail")
		''			'Dim temp As Int = coldevices.Get("temp")
		''			Dim error_msg As String = coldevices.Get("error_msg")
'			Dim device_id As Int = coldevices.Get("device_id")
		''			Dim wifi_strength As Int = coldevices.Get("wifi_strength")
		''			Dim lfr_strength As Int = coldevices.Get("lfr_strength")
'			Dim active As String = coldevices.Get("active")
'			
'			Dim device_type As String = coldevices.Get("device_type")
'			If device_type <> "camera" Then 
'				Continue
'			End If
'			
		''			Dim Type As String = coldevices.Get("type")
'			Dim battery As Int = coldevices.Get("battery")
'			Dim enabled As String = coldevices.Get("enabled")
		''			Dim updated_at As String = coldevices.Get("updated_at")
		''			Dim usage_rate As String = coldevices.Get("usage_rate")
		''			Dim armed As String = coldevices.Get("armed")
		''			Dim name As String = coldevices.Get("name")
		''			Dim warning As Int = coldevices.Get("warning")
		''			Dim notifications As Int = coldevices.Get("notifications")
		''			Dim errors As Int = coldevices.Get("errors")
		''          Dim status As String = coldevices.Get("status")
		For Each colcameras As Map In cameras
			'Dim thumbnail As String = colcameras.Get("thumbnail")
			'Dim created_at As String = colcameras.Get("created_at")
			'Dim Type As String = colcameras.Get("type")
			Dim battery_state As String = colcameras.Get("battery")
			'Dim issues As List = colcameras.Get("issues")
			Dim enabled As String = colcameras.Get("enabled")
			'Dim network_id As Int = colcameras.Get("network_id")
			Dim signals As Map = colcameras.Get("signals")
			'Dim wifi As Int = signals.Get("wifi")
			'Dim temp As Int = signals.Get("temp")
			'Dim lfr As Int = signals.Get("lfr")
			Dim battery As Int = signals.Get("battery")
			'Dim updated_at As String = colcameras.Get("updated_at")
			'Dim serial As String = colcameras.Get("serial")
			'Dim usage_rate As String = colcameras.Get("usage_rate")
			Dim name As String = colcameras.Get("name")
			'Dim id As Int = colcameras.Get("id")
			'Dim fw_version As String = colcameras.Get("fw_version")
			Dim status As String = colcameras.Get("status")
			
			' Show system armed/disarmed notification via Tasker intent
			Dim Intent1 As Intent
			Dim Phone As Phone
						
			If name = "Side Yard" Then
				If enabled = "true" Then
					If enabled = "true" Then
						SideYardArmedStatus = ""
						Dim jo As JavaObject = lblSideYard
						Dim radius = 2dip, dx = 0dip, dy = 0dip As Float
						jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Black))
					Else
						SideYardArmedStatus = "MOTION DETECTION IS DISABLED!"
						Dim jo As JavaObject = lblSideYard
						Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
						jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
					End If
										
					Intent1.Initialize("blink.noti.sideyard.armed", "")
					Phone.SendBroadcastIntent(Intent1)
				Else
'					SideYardArmedStatus = "CAMERA NOT ARMED!"
'					Dim jo As JavaObject = lblSideYard
'					Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
'					jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
'					
'					Intent1.Initialize("blink.noti.sideyard.disarmed", "")
'					Phone.SendBroadcastIntent(Intent1)
				End If
				If battery > 1 And battery_state = "ok" Then
					SideYardBattStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & "]"
					Dim jo As JavaObject = lblSideYardBatt
					Dim radius = 2dip, dx = 0dip, dy = 0dip As Float
					jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Green))
				Else
					SideYardBattStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & "]"
					If SideYardBattStatus = "[Level 1 - LOW]" Then
						SideYardBattStatus = "[REPLACE]"
					End If
					Dim jo As JavaObject = lblSideYardBatt
					Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
					jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
				End If
				If status = "offline" Then
					SideYardBattStatus = "OFFLINE"
					Dim jo As JavaObject = lblSideYardBatt
					Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
					jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
				End If
			Else If name = "Front Yard" Then
				If enabled = "true" Then
					If enabled = "true" Then
						FrontYardArmedStatus = ""
						Dim jo As JavaObject = lblFrontYard
						Dim radius = 2dip, dx = 0dip, dy = 0dip As Float
						jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Black))
					Else
						FrontYardArmedStatus = "MOTION DETECTION IS DISABLED!"
						Dim jo As JavaObject = lblFrontYard
						Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
						jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
					End If
					
					Intent1.Initialize("blink.noti.frontyard.armed", "")
					Phone.SendBroadcastIntent(Intent1)
				Else
'					FrontYardArmedStatus = "CAMERA NOT ARMED!"
'					Dim jo As JavaObject = lblFrontYard
'					Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
'					jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
					
'					Intent1.Initialize("blink.noti.frontyard.disarmed", "")
'					Phone.SendBroadcastIntent(Intent1)
				End If
				If battery > 1 And battery_state = "ok" Then
					FrontYardBattStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & "]"
					Dim jo As JavaObject = lblFrontYardBatt
					Dim radius = 2dip, dx = 0dip, dy = 0dip As Float
					jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Green))
				Else
					FrontYardBattStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & "]"
					If FrontYardBattStatus = "[Level 1 - LOW]" Then
						FrontYardBattStatus = "[REPLACE]"
					End If
					Dim jo As JavaObject = lblFrontYardBatt
					Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
					jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
				End If
				If status = "offline" Then
					FrontYardBattStatus = "OFFLINE"
					Dim jo As JavaObject = lblFrontYardBatt
					Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
					jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
				End If
			Else If name = "Backyard" Then
				If enabled = "true" Then
					If enabled = "true" Then
						BackyardArmedStatus = ""
						Dim jo As JavaObject = lblBackyard
						Dim radius = 2dip, dx = 0dip, dy = 0dip As Float
						jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Black))
					Else
						BackyardArmedStatus ="MOTION DETECTION IS DISABLED!"
						Dim jo As JavaObject = lblBackyard
						Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
						jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
					End If
					
					Intent1.Initialize("blink.noti.backyard.armed", "")
					Phone.SendBroadcastIntent(Intent1)
				Else
'					BackyardArmedStatus = "CAMERA NOT ARMED!"
'					Dim jo As JavaObject = lblBackyard
'					Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
'					jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
					
'					Intent1.Initialize("blink.noti.backyard.disarmed", "")
'					Phone.SendBroadcastIntent(Intent1)
				End If
				If battery > 1 And battery_state = "ok" Then
					BackyardBattStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & "]"
					Dim jo As JavaObject = lblBackyardBatt
					Dim radius = 2dip, dx = 0dip, dy = 0dip As Float
					jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Green))
				Else
					BackyardBattStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & "]"
					If BackyardBattStatus = "[Level 1 - LOW]" Then
						BackyardBattStatus = "[REPLACE]"
					End If
					Dim jo As JavaObject = lblBackyardBatt
					Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
					jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
				End If
				If status = "offline" Then
					BackyardBattStatus = "OFFLINE"
					Dim jo As JavaObject = lblBackyardBatt
					Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
					jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
				End If
			End If
		Next
		
		Dim networks As List = root.Get("networks")
		For Each colnetworks As Map In networks
			'Dim updated_at As String = colnetworks.Get("updated_at")
			'Dim dst As String = colnetworks.Get("dst")
			Dim armed As String = colnetworks.Get("armed")
			'Dim name As String = colnetworks.Get("name")
			'Dim created_at As String = colnetworks.Get("created_at")
			'Dim id As Int = colnetworks.Get("id")
			'Dim time_zone As String = colnetworks.Get("time_zone")
			'Dim lv_save As String = colnetworks.Get("lv_save")
		Next

		swArmed.Value = armed
		
		If armed <> "true" Then
			SideYardArmedStatus = "SYSTEM NOT ARMED!"
			Dim jo As JavaObject = lblSideYard
			Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
			jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
			
			FrontYardArmedStatus = "SYSTEM NOT ARMED!"
			Dim jo As JavaObject = lblFrontYard
			Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
			jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
			
			BackyardArmedStatus = "SYSTEM NOT ARMED!"
			Dim jo As JavaObject = lblBackyard
			Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
			jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Red))
			
			Intent1.Initialize("blink.noti.disarmed", "")
			Phone.SendBroadcastIntent(Intent1)
		Else
			Intent1.Initialize("blink.noti.armed", "")
			Phone.SendBroadcastIntent(Intent1)
		End If
	Catch
		Log(LastException)
	End Try
	Return Null
End Sub


'Sub CheckBattLife(battlevel As Int, lbl As Label) As String
'	Try
'		' http://data.energizer.com/pdfs/l91.pdf
'		Dim jo As JavaObject = lbl
'		Dim radius = 4dip, dx = 0dip, dy = 0dip As Float
'		If battlevel <= 136 Then
'			jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.red))
'			Return "Replace battery now!"
'		else If battlevel >= 160 Then
'			jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Green))
'			Return "High"
'		else If battlevel > 136 And battlevel < 140 Then
'			jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.RGB(255,127,80)))
'			Return "Low"
'		Else
'			jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Green))
'			Return "Good"
'		End If
'	Catch
'		Log(LastException)
'		'ToastMessageShow("CheckBattLife: " & LastException,False)
'		Return ""
'	End Try
'End Sub

Sub CheckLFRLevel(lfrlevel As Int) As String
	Try
		' https://www.metageek.com/training/resources/wifi-signal-strength-basics.html
		If lfrlevel > -67 Then
			Return "Amazing"
		else If lfrlevel > -70 And lfrlevel <= -67 Then
			Return "Very good"
		else If lfrlevel > -80 And lfrlevel <= -70 Then
			Return "OK"
		else If lfrlevel > -90 And lfrlevel <= -80 Then
			Return "Not Good"
		Else
			Return "Unusable"
		End If
	Catch
		Log(LastException)
		lblStatus.Text = "CheckLFRLevel LastException: " & LastException
		Return ""
	End Try
End Sub

Sub ConvertDateTime(inputTime As String) As String
	' https://www.b4x.com/android/forum/threads/convert-utc-to-ticks-and-vice-versa.36592/#content
	Dim ticks As Long = ParseUTCstring(inputTime.Replace("+00:00","+0000"))
	'DateTime.DateFormat = "MMM d, yyyy h:mm:ss a"
	DateTime.DateFormat = "yyyy-MM-dd h:mm:ss a"
	Dim lngTicks As Long = ticks
	'Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
	'Log("Time difference: " & p.Days & "d " & p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s")
	Return DateTime.Date(lngTicks)
End Sub

Sub ParseUTCstring(utc As String) As Long
	Dim df As String = DateTime.DateFormat
	Dim res As Long
	If utc.CharAt(10) = "T" Then
		'convert the second format to the first one.
		If utc.CharAt(19) = "." Then utc = utc.SubString2(0, 19) & "+0000"
		DateTime.DateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
		' 2019-09-20T13:04:05+00:00
	Else
		DateTime.DateFormat = "EEE MMM dd HH:mm:ss Z yyyy"
	End If
	Try
		res = DateTime.DateParse(utc)
	Catch
		res = 0
	End Try
	DateTime.DateFormat = df
	Return res
End Sub

Sub btnSideYard_Click
	Dim bd As BitmapDrawable
	bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
	If Msgbox2("Capture new camera thumbnails?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) = DialogResponse.POSITIVE Then 'ignore
		ScrollViewBlink.ScrollToNow(0)
		btnSideYard.Enabled = False
		btnRefresh.Enabled = False
		btnSideYardNewClip.Enabled = False
		btnFrontYardNewClip.Enabled = False
		btnBackyardNewClip.Enabled = False
		btnSideYardRefresh.Enabled = False
		btnFrontYardRefresh.Enabled = False
		btnBackyardRefresh.Enabled = False
		swArmed.Enabled = False
		ivSideYard.Enabled = False
		ivFrontYard.Enabled = False
		ivBackyard.Enabled = False
		BlurIV("SideYard.jpg",ivSideYard)
		BlurIV("FrontYard.jpg",ivFrontYard)
		BlurIV("Backyard.jpg",ivBackyard)
'		Dim rs As ResumableSub = RefreshCameras(False, "All")
'		wait for (rs) complete (Result As Object)

		Dim rs As ResumableSub = RefreshCameras(False, "347574")
		wait for (rs) complete (Result As Object)

		Dim rs As ResumableSub = RefreshCameras(False, "236967")
		wait for (rs) complete (Result As Object)
	
		Dim rs As ResumableSub = RefreshCameras(False, "458236")
		wait for (rs) complete (Result As Object)
		
		btnSideYard.Enabled = True
		btnRefresh.Enabled = True
		btnSideYardNewClip.Enabled = True
		btnFrontYardNewClip.Enabled = True
		btnBackyardNewClip.Enabled = True
		btnSideYardRefresh.Enabled = True
		btnFrontYardRefresh.Enabled = True
		btnBackyardRefresh.Enabled = True
		ivSideYard.Enabled = True
		ivFrontYard.Enabled = True
		ivBackyard.Enabled = True
		swArmed.Enabled = True
	End If
End Sub

Sub BlurIV (image As String,iv As ImageView)
	Try
		bmp = xui.LoadBitmapResize(File.DirInternal, image, iv.Width, iv.Height, True)
		effects.Initialize
		iv.Bitmap = effects.Blur(bmp)
	Catch
		Log(LastException)
	End Try
End Sub

Sub SetTextShadow(lbl As Label)
	Dim jo As JavaObject = lbl
	Dim radius = 2dip, dx = 0dip, dy = 0dip As Float
	jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Black))
End Sub

Sub ivBackyard_Click
	Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/458236")
	wait for (rs) complete (Result As Object)
	
	Dim rs As ResumableSub = GetCameraInfo(response,False)
	wait for (rs) complete (Result As Object)
	
	
	Dim rs As ResumableSub = DownloadImageFullscreen("https://rest-" & userRegion &".immedia-semi.com/" & cameraThumbnail & ".jpg", "458236")
	wait for (rs) complete (Result As Object)
	If response.StartsWith("ERROR: ") = False Then
		lblStatus.Text = "Ready"
	End If
End Sub

Sub ivFrontYard_Click
	Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/236967")
	wait for (rs) complete (Result As Object)
	
	Dim rs As ResumableSub = GetCameraInfo(response,False)
	wait for (rs) complete (Result As Object)
	
	Dim rs As ResumableSub = DownloadImageFullscreen("https://rest-" & userRegion &".immedia-semi.com/" & cameraThumbnail & ".jpg", "236967")
	wait for (rs) complete (Result As Object)
	If response.StartsWith("ERROR: ") = False Then
		lblStatus.Text = "Ready"
	End If
End Sub

Sub ivSideYard_Click
	Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/347574")
	wait for (rs) complete (Result As Object)
	
	Dim rs As ResumableSub = GetCameraInfo(response,False)
	wait for (rs) complete (Result As Object)
	
	Dim rs As ResumableSub = DownloadImageFullscreen("https://rest-" & userRegion &".immedia-semi.com/" & cameraThumbnail & ".jpg", "347574")
	wait for (rs) complete (Result As Object)
	If response.StartsWith("ERROR: ") = False Then
		lblStatus.Text = "Ready"
	End If
End Sub

Sub GetVideos(json As String) As ResumableSub
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		Dim media As List = root.Get("media")
		
		clvActivity.Clear
		
		'ProgressDialogShow2("Loading video clips...",False)
		Pages = Array(False, False, False, False, False, True) 'True = Enabled
		For Each colmedia As Map In media
			Dim thumbnail As String = colmedia.Get("thumbnail")
			Dim created_at As String = colmedia.Get("created_at")
			Dim device_name As String = colmedia.Get("device_name")
			Dim watched As String = colmedia.Get("watched")
			Dim medianame As String = colmedia.Get("media")
			Dim VideoID As String = colmedia.Get("id")
			Dim mytypes As Object = Starter.kvs.Get(VideoID)
			Dim videos = mytypes As VideoInfo
			If (videos = Null) Or (watched <> videos.Watched) Then
				Dim j As HttpJob
				j.Initialize("", Me)
				j.Download("https://rest-" & userRegion &".immedia-semi.com" & thumbnail & ".jpg")
				j.GetRequest.SetHeader("TOKEN_AUTH", authToken)
				Wait For (j) JobDone(j As HttpJob)
				If j.Success Then
					Dim out As OutputStream = File.OpenOutput(File.DirInternal, "screenshot.jpg", False)
					File.Copy2(j.GetInputStream, out)
					out.Close '<------ very important
					Dim image As B4XBitmap = xui.LoadBitmapResize(File.DirInternal, "screenshot.jpg", 178dip, 100dip, True)
					Dim out As OutputStream
					out.InitializeToBytesArray(0)
					image.WriteToStream(out, 100, "JPEG")
					Starter.kvs.Put(VideoID, CreateCustomType(medianame,created_at,watched,device_name,VideoID,out.ToBytesArray))
					out.Close
				End If
				j.Release
			End If
		Next
		
		Dim bmp2 As Bitmap
		Dim jumpToThisItem As Int = 0
		clvActivity.Clear
		Dim list1 As List = Starter.kvs.ListKeys
		For i =  0 To list1.Size-1
			
			'Log("kvs.ListKeys " & i & " | " & videos.VideoID & " | " & videos.Watched)
			
			If i > 49 Then
				Dim mytypes As Object = Starter.kvs.Get(list1.Get(i))
				Dim videos = mytypes As VideoInfo
				
				Dim videoName As String
				videoName = "https://rest-" & userRegion &".immedia-semi.com" & videos.ThumbnailPath
				If videoName.ToLowerCase.EndsWith(".mp4") = False Then
					videoName = videoName.Trim & ".mp4"
				End If
				videoName = videoName.SubString(videoName.LastIndexOf("/")+1)
				
				If File.Exists(File.DirInternal, videoName) Then
					File.Delete(File.DirInternal, videoName)
				End If
				Starter.kvs.Remove(list1.Get(i))
			Else
				Dim mytypes As Object = Starter.kvs.Get(list1.Get(i))
				Dim videos = mytypes As VideoInfo
				Dim In As InputStream
				In.InitializeFromBytesArray(videos.ThumbnailBLOB, 0, videos.ThumbnailBLOB.Length)
				
				bmp2.Initialize2(In)
				Dim cd As CardData
				cd.Initialize
				cd.screenshot = bmp2
				cd.filedate = videos.DateCreated
				cd.deviceinfo = videos.DeviceName
				cd.iswatchedvisible = Not(videos.Watched)
				If videos.Watched = False Then
					jumpToThisItem = i
				End If
				cd.mediaURL = "https://rest-" & userRegion &".immedia-semi.com" & videos.ThumbnailPath
				Dim p As B4XView = xui.CreatePanel("")
				p.SetLayoutAnimated(0, 0, 0, clvActivity.AsView.Width, 100dip)
				clvActivity.Add(p, cd)
			End If
		Next
			
		If clvActivity.Size < 50 Then
			B4XLoadingIndicator4.Show
				
			lblDuration.Text = "0:00"
			wvMedia.LoadUrl("")
			
			'ToastMessageShow("Acquiring page 2. Video count is " & clvActivity.Size & ".",False)
				
			' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
			Dim rs As ResumableSub = GetUnwatchedVideosPage2
			wait for (rs) complete (Results As Object)
				
			' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
			Dim rs As ResumableSub = GetVideos(response)
			wait for (rs) complete (Results As Object)
				
			TabStrip1.ScrollTo(5,False)
			Sleep(100)
			B4XLoadingIndicator4.Hide
		End If

		If list1.Size > 0 Then
			Sleep(100)
			clvActivity.JumpToItem(jumpToThisItem)
			Sleep(100)
			clvActivity.JumpToItem(jumpToThisItem)
			Sleep(100)
			clvActivity_ItemClick(jumpToThisItem,"") '"https://rest-" & userRegion &".immedia-semi.com" & videos.ThumbnailPath & "|" & videos.DeviceName & " " & ConvertFullDateTime(videos.DateCreated))
			Sleep(100)
		End If
		
	Catch
		Log(LastException)
	End Try
	B4XLoadingIndicator4.hide
	Pages = Array(True, True, True, True, True, True) 'True = Enabled
	Return Null
End Sub

Private Sub CreateCustomType(ThumbnailPath As String, DateCreated As String, Watched As String, DeviceName As String, VideoID As String, ThumbnailBLOB() As Byte) As VideoInfo
	Dim ct As VideoInfo
	ct.Initialize
	ct.ThumbnailPath = ThumbnailPath
	ct.DateCreated = DateCreated
	ct.Watched = Watched
	ct.DeviceName = DeviceName
	ct.ThumbnailBLOB = ThumbnailBLOB
	ct.VideoID = VideoID
	Return ct
End Sub


Sub clvActivity_VisibleRangeChanged (FirstIndex As Int, LastIndex As Int)
	Dim ExtraSize As Int = 1
	For i = 0 To clvActivity.Size - 1
		Dim p As B4XView = clvActivity.GetPanel(i)
		If i > FirstIndex - ExtraSize And i < LastIndex + ExtraSize Then
			'visible+
			If p.NumberOfViews = 0 Then
				Dim cd As CardData = clvActivity.GetValue(i)
				p.LoadLayout("blinkcellitem")
				ivScreenshot.Bitmap = cd.screenshot
								
				Dim dayname As String
				dayname = ConvertDayName(cd.filedate)
				If cd.iswatchedvisible Then
					ivWatched.Visible = True
					lblDate.Text = "   " & dayname & " " & ConvertDateTimePeriod(cd.filedate,dayname)
				Else
					ivWatched.Visible = False
					lblDate.Text = "   " & dayname
				End If
				lblFileInfo.Text = "   " & ConvertFullDateTime(cd.filedate)
				lblDeviceInfo.Text = "   " & cd.deviceinfo
				lblMediaURL.Text = cd.mediaURL
						
				If previousSelectedIndex > (clvActivity.Size-1) Then
					previousSelectedIndex = 0
				End If
				If previousSelectedIndex = i Then
					Dim p As B4XView = clvActivity.GetPanel(previousSelectedIndex)
					If p.NumberOfViews > 0 Then
						Dim backPane As B4XView = p.getview(0)
						backPane.Color = xui.Color_ARGB(255,217,215,222)
						
						Dim ContentLabel As B4XView = p.GetView(0).GetView(6)
						ContentLabel.Visible = True
					End If
				End If
			End If
		Else
			'not visible
			If p.NumberOfViews > 0 Then
				Dim ivCleanUP As ImageView = p.GetView(0).GetView(3)
				ivCleanUP.Bitmap = Null
				p.RemoveAllViews
			End If
		End If
	Next
End Sub

'
'Sub CreateListItem(screenshot As B4XBitmap, fileinfo As String, devicename As String, isWatchedVisible As Boolean) As B4XView
'	Try
'		'https://www.b4x.com/android/forum/threads/customlistview.103498/#post-648747
'		'https://www.b4x.com/android/forum/threads/customlistview-b4a-to-b4j.85047/#post-539068
'		'https://www.b4x.com/android/forum/threads/b4x-xui-xcustomlistview.90789/#post-573958
'		Dim p As B4XView = xui.CreatePanel("")
'		'Dim height As Int = 280dip
'		'If GetDeviceLayoutValues.ApproximateScreenSize < 4.5 Then height = 310dip
'		p.SetLayoutAnimated(0, 0, 0, clvActivity.AsView.Width,100dip)
'		p.LoadLayout("blinkcellitem")
'		ivScreenshot.Bitmap = screenshot
'		If isWatchedVisible Then
'			lblDate.Text = "   " & ConvertDayName(fileinfo)
'			lblDate.Text = lblDate.Text & " " & ConvertDateTimePeriod(fileinfo,ConvertDayName(fileinfo))
'		Else
'			lblDate.Text = "   " & ConvertDayName(fileinfo)
'		End If
'		lblFileInfo.Text = "   " & ConvertFullDateTime(fileinfo)
'		lblDeviceInfo.Text = "   " & devicename
'		Return p
'		
'	Catch
'		Log(LastException)
'		Return Null
'	End Try
'End Sub

Sub clvActivity_ItemClick (Index As Int, Value As Object)
	Try
		Dim p As B4XView = clvActivity.GetPanel(Index)
		If p.NumberOfViews > 0 Then
			Dim ContentLabel As B4XView = p.GetView(0).GetView(6)
			ContentLabel.Visible = False
			
			Dim ContentLabel As B4XView = p.GetView(0).GetView(4)
			ContentLabel.Visible = False
		End If
		
		UpdateItemColor(Index)
		wvMedia.LoadUrl("")
		
		Dim cd As CardData = clvActivity.GetValue(Index)
		Dim videoURL As String = cd.mediaURL
		
		B4XLoadingIndicator4.Show
		
		Dim list1 As List = Starter.kvs.ListKeys
		For i =  0 To list1.Size-1
			Dim mytypes As Object = Starter.kvs.Get(list1.Get(i))
			Dim videos = mytypes As VideoInfo
			If videoURL.Contains(videos.VideoID) Then
				Starter.kvs.Put(videos.VideoID,CreateCustomType(videos.ThumbnailPath,videos.DateCreated,"true",videos.DeviceName,videos.VideoID,videos.ThumbnailBLOB))
			End If
		Next
		lblDuration.Text = "0:00"
		' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
		Dim rs As ResumableSub = ShowVideo(videoURL)
		wait for (rs) complete (Result As Object)
		
		' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
		Dim rs As ResumableSub = GetUnwatchedVideos
		wait for (rs) complete (Results As Object)
		
	Catch
		Log(LastException)
	End Try
	B4XLoadingIndicator4.Hide
End Sub

Sub UpdateItemColor (Index As Int)
	Try
		If previousSelectedIndex > (clvActivity.Size-1) Then
			previousSelectedIndex = 0
		End If
		
		If previousSelectedIndex <> Index Then
			Dim p As B4XView = clvActivity.GetPanel(previousSelectedIndex)
			If p.NumberOfViews > 0 Then
				Dim backPane As B4XView = p.getview(0)
				backPane.Color = xui.Color_White
				
				Dim ContentLabel As B4XView = p.GetView(0).GetView(6)
				ContentLabel.Visible = False
			End If
		End If
	
		Dim p As B4XView = clvActivity.GetPanel(Index)
		If p.NumberOfViews > 0 Then
			Dim backPane As B4XView = p.getview(0)
			backPane.Color = xui.Color_ARGB(255,217,215,222)
			
			Dim ContentLabel As B4XView = p.GetView(0).GetView(6)
			ContentLabel.Visible = True
		End If
	
		previousSelectedIndex = Index
	Catch
		Log(LastException)
	End Try
End Sub

'Sub UpdateItemColor (Index As Int, Color As Int)
'	Try
'		If previousSelectedIndex <> Index Then
'			Dim p As B4XView = clvActivity.GetPanel(previousSelectedIndex)
'			If p.NumberOfViews > 0 Then
'				'get the content label view (it is inside an additional panel)
'				Dim ContentLabel As B4XView = p.GetView(0).GetView(0) ' 2nd label e.g. Today 10:30 am
'				ContentLabel.TextColor = -1979711488 
'		
'				Dim ContentLabel As B4XView = p.GetView(0).GetView(1) ' 3rd label e.g. 48m 35s 2s ago
'				ContentLabel.TextColor = -1979711488 
'		
'				Dim ContentLabel As B4XView = p.GetView(0).GetView(2) ' 1st label e.g. Front Yard
'				ContentLabel.TextColor = -1979711488
'			End If
'		End If
'	
'		Dim p As B4XView = clvActivity.GetPanel(Index)
'		If p.NumberOfViews > 0 Then
'			'get the content label view (it is inside an additional panel)
'			Dim ContentLabel As B4XView = p.GetView(0).GetView(0) ' 2nd label e.g. Today 10:30 am
'			ContentLabel.TextColor = Color
'		
'			Dim ContentLabel As B4XView = p.GetView(0).GetView(1) ' 3rd label e.g. 48m 35s 2s ago
'			ContentLabel.TextColor = Color
'		
'			Dim ContentLabel As B4XView = p.GetView(0).GetView(2) ' 1st label e.g. Front Yard
'			ContentLabel.TextColor = Color
'		End If
'
'		previousSelectedIndex = Index
'	Catch
'		Log(LastException)
'	End Try
'End Sub

Sub ConvertDateTimePeriod(inputTime As String, dayname As String) As String
	' https://www.b4x.com/android/forum/threads/convert-utc-to-ticks-and-vice-versa.36592/#content
	Dim ticks As Long = ParseUTCstring(inputTime.Replace("+00:00","+0000"))
	DateTime.DateFormat = "MMM d, yyyy h:mm:ss a"
	Dim lngTicks As Long = ticks
	Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
	'Log("Time difference: " & p.Days & "d " & p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s")
	If dayname.Contains("Today") Then
		If p.Days = 0 Then
			If p.Hours = 0 Then
				If p.Minutes = 0 Then
					Return p.Seconds & "s ago"
				Else
					Return p.Minutes & "m " & p.Seconds & "s ago"
				End If
			Else
				Return p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s ago"
			End If
		else If p.Hours = 0 Then
			If p.Minutes = 0 Then
				Return p.Seconds & "s ago"
			Else
				Return p.Minutes & "m " & p.Seconds & "s ago"
			End If
		else If p.Minutes = 0 Then
			Return p.Seconds & "s ago"
		Else
			Return p.Days & "d " & p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s ago"
		End If
	else if dayname.Contains("Yesterday") Then
		If p.Days = 0 Then
			If p.Hours = 0 Then
				If p.Minutes = 0 Then
					Return p.Seconds & "s ago"
				Else
					Return p.Minutes & "m " & p.Seconds & "s ago"
				End If
			Else
				Return p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s ago"
			End If
		Else
			Return p.Days & "d " & p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s ago"
		End If
	Else
		Return p.Days & "d " & p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s ago"
	End If

End Sub

Sub ConvertDayName(inputTime As String) As String
	Try
		' https://www.b4x.com/android/forum/threads/convert-utc-to-ticks-and-vice-versa.36592/#content
		Dim ticks As Long = ParseUTCstring(inputTime.Replace("+00:00","+0000"))
		DateTime.DateFormat = "MMM d, yyyy h:mm:ss a"
		Dim lngTicks As Long = ticks

		Dim Yesterday As Long
		Dim timestamp As Long
		DateTime.DateFormat = "yyyyMMdd"
		Yesterday = DateTime.Date(DateTime.add(DateTime.Now, 0, 0, -1))
		timestamp = DateTime.Date(lngTicks)

		Dim tempCurrentDate As Long
		Dim tempPastDate As Long
		
		tempCurrentDate = DateTime.Date(DateTime.add(DateTime.Now, 0, 0, 0))
		tempPastDate = DateTime.Date(DateTime.add(DateTime.Now, 0, 0, -7))

		DateTime.DateFormat = "h:mm:ss a"
		If DateUtils.IsSameDay(lngTicks,DateTime.now) Then
			Return "Today" 
		Else If Yesterday = timestamp Then
			Return "Yesterday" 
		Else if timestamp > tempPastDate And timestamp < tempCurrentDate  Then
			Return DateUtils.GetDayOfWeekName(lngTicks) 
		Else
			DateTime.DateFormat = "MMMM d, yyyy"
			Return DateTime.Date(lngTicks) & " (" & DateUtils.GetDayOfWeekName(lngTicks) & ")"
		End If
	Catch
		Return inputTime
		Log(LastException)
	End Try
End Sub

Sub ConvertFullDateTime(inputTime As String) As String
	Try
		' https://www.b4x.com/android/forum/threads/convert-utc-to-ticks-and-vice-versa.36592/#content
		Dim ticks As Long = ParseUTCstring(inputTime.Replace("+00:00","+0000"))
		DateTime.DateFormat = "MMM d, yyyy h:mm:ss a"
		Dim lngTicks As Long = ticks

		Dim Yesterday As Long
		Dim timestamp As Long
		DateTime.DateFormat = "yyyyMMdd"
		Yesterday = DateTime.Date(DateTime.add(DateTime.Now, 0, 0, -1))
		timestamp = DateTime.Date(lngTicks)

		DateTime.DateFormat = "h:mm:ss a"
		If DateUtils.IsSameDay(lngTicks,DateTime.now) Then
			Return DateTime.Date(lngTicks)
		Else If Yesterday = timestamp Then
			Return DateTime.Date(lngTicks)
		Else
			Return DateTime.Date(lngTicks)
		End If
	Catch
		Return inputTime
		Log(LastException)
	End Try
End Sub

Sub ShowVideo (Link As String) As ResumableSub
	Try
		Dim videoName As String
		videoName = Link.SubString(Link.LastIndexOf("/")+1)

		If File.Exists(File.DirInternal, videoName) = False Then
			Dim j As HttpJob
			j.Initialize("", Me)
			j.Download(Link)
			j.GetRequest.SetHeader("TOKEN_AUTH", authToken)
			Wait For (j) JobDone(j As HttpJob)
			If j.Success Then
				' Save to a JPG file
				Dim out As OutputStream = File.OpenOutput(File.DirInternal, videoName, False)
				File.Copy2(j.GetInputStream, out)
				out.Close '<------ very important
			Else

			End If
		End If
		
		B4XLoadingIndicator4.hide
		
		Dim sb As StringBuilder
		sb.Initialize
		sb.Append("<video width='100%' height='100%' controls autoplay muted>")
		sb.Append("<source src='" & File.Combine(File.DirInternal, "\" & videoName) & "' Type='video/mp4'/>")
		sb.Append("</video>")
		Dim WebViewSettings1 As WebViewSettings
		WebViewSettings1.setMediaPlaybackRequiresUserGesture(wvMedia,False)
		wvMedia.LoadHtml(sb.ToString)
			
		Dim r As Reflector
		r.Target = wvMedia
		r.Target = r.RunMethod("getSettings")
		r.RunMethod2("setBuiltInZoomControls", True, "java.lang.boolean")
		r.RunMethod2("setDisplayZoomControls", False, "java.lang.boolean")
				
		mediaMetaData.Initialize
		mediaMetaData.ProcessMediaFile(File.DirInternal,videoName)
		Dim ticks As Long = (mediaMetaData.GetDuration/1000) * DateTime.TicksPerSecond
		lblDuration.Text = ConvertTicksToTimeString(ticks)

		If j.ErrorMessage.Contains("Media not found") Then
			clvActivity.RemoveAt(previousSelectedIndex)
			Dim list1 As List = Starter.kvs.ListKeys
			For i =  0 To list1.Size-1
				Dim mytypes As Object = Starter.kvs.Get(list1.Get(i))
				Dim videos = mytypes As VideoInfo
				If Link.Contains(videos.VideoID) Then
					Starter.kvs.Remove(list1.Get(i))
					Exit
				End If
			Next
			ToastMessageShow("Media not found. Removed from the list.",True)
		End If
		j.Release
		
		' Remove all Blink notifications via Tasker intent
		Dim Intent1 As Intent
		Intent1.Initialize("blink.noti.clear", "")
		Dim Phone As Phone
		Phone.SendBroadcastIntent(Intent1)
	Catch
		Log(LastException)
	End Try
	
	Try
		If previousSelectedIndex > (clvActivity.Size-1) Then
			previousSelectedIndex = 0
		End If
		Dim p As B4XView = clvActivity.GetPanel(previousSelectedIndex)
		If p.NumberOfViews > 0 Then
			'get the content label view (it is inside an additional panel)
			Dim ContentLabel As ImageView = p.GetView(0).GetView(4) ' imageview for unwatched videos
			ContentLabel.Visible = False
			
			Dim cd As CardData = clvActivity.GetValue(previousSelectedIndex)
			cd.iswatchedvisible = False
			
			Dim ContentLabel1 As Label = p.GetView(0).GetView(0)
			ContentLabel1.Text = "   " & ConvertDayName(cd.filedate)
			
			Dim ContentLabel As ImageView = p.GetView(0).GetView(6)
			ContentLabel.Visible = True
		End If
		
		'GetUnwatchedVideos
	Catch
		Log(LastException)
	End Try
	Return Null
End Sub

Sub wvMedia_PageFinished (Url As String)
	
End Sub

Sub ConvertTicksToTimeString(t As Long) As String
	Dim  hours, minutes, seconds As Int 'ignore
	hours = t / DateTime.TicksPerHour
	minutes = (t Mod DateTime.TicksPerHour) / DateTime.TicksPerMinute
	seconds = (t Mod DateTime.TicksPerMinute) / DateTime.TicksPerSecond
	Return NumberFormat(minutes, 1, 0) & ":" & NumberFormat(seconds, 2, 0)
End Sub

Sub GetUnwatchedVideos() As ResumableSub
	Try
		Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/api/v1/accounts/88438/media/changed?since=-999999999-01-01T00:00:00+18:00&page=1")
		wait for (rs) complete (Result As Object)
		
		Dim unwatchedVideoCount As Int = 0
		Dim parser As JSONParser
		parser.Initialize(response)
		Dim root As Map = parser.NextObject
		Dim media As List = root.Get("media")
		
		'Dim n As Long = DateTime.Now
		For Each colmedia As Map In media
			Dim watched As String = colmedia.Get("watched")
'			Dim VideoID As String = colmedia.Get("id")
'			Dim mytypes As Object = Starter.kvs.Get(VideoID)
'			Dim videos = mytypes As VideoInfo
			If watched = False Then
				unwatchedVideoCount = unwatchedVideoCount + 1
			End If
		Next
		'Log("Loading unwatched videos took: " & (DateTime.Now - n) & "ms")
		Dim lbl As B4XView = GetAllTabLabelsForBadge(TabStrip1).Get(5)
		badger1.SetBadge(lbl, unwatchedVideoCount)
		StateManager.SetSetting("UnwatchedVideoClips",unwatchedVideoCount)
		StateManager.SaveSettings
		If unwatchedVideoCount > 0 Then
			isThereUnwatchedVideo = True
		Else
			isThereUnwatchedVideo = False
		End If
	Catch
		Log(LastException)
	End Try
	Return Null
End Sub

Sub GetUnwatchedVideosPage2() As ResumableSub
	Try
		Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/api/v1/accounts/88438/media/changed?since=-999999999-01-01T00:00:00+18:00&page=2")
		wait for (rs) complete (Result As Object)
		
		Dim unwatchedVideoCount As Int = 0
		Dim parser As JSONParser
		parser.Initialize(response)
		Dim root As Map = parser.NextObject
		Dim media As List = root.Get("media")
		
		'Dim n As Long = DateTime.Now
		For Each colmedia As Map In media
			Dim watched As String = colmedia.Get("watched")
'			Dim VideoID As String = colmedia.Get("id")
'			Dim mytypes As Object = Starter.kvs.Get(VideoID)
'			Dim videos = mytypes As VideoInfo
			If watched = False Then
				unwatchedVideoCount = unwatchedVideoCount + 1
			End If
		Next
		'Log("Loading unwatched videos took: " & (DateTime.Now - n) & "ms")
		Dim lbl As B4XView = GetAllTabLabelsForBadge(TabStrip1).Get(5)
		badger1.SetBadge(lbl, unwatchedVideoCount)
		StateManager.SetSetting("UnwatchedVideoClips",unwatchedVideoCount)
		StateManager.SaveSettings
		If unwatchedVideoCount > 0 Then
			isThereUnwatchedVideo = True
		Else
			isThereUnwatchedVideo = False
		End If
	Catch
		Log(LastException)
	End Try
	Return Null
End Sub

'
'Sub StringCount(StringToSearch As String,TargetStr As String,IgnoreCase As Boolean) As Int
'	If IgnoreCase Then
'		StringToSearch = StringToSearch.ToLowerCase
'		TargetStr = TargetStr.ToLowerCase
'	End If
'	Return (StringToSearch.Length - StringToSearch.Replace(TargetStr,"").Length) / TargetStr.Length
'
'End Sub

Sub btnSideYardNewClip_Click
	Dim bd As BitmapDrawable
	bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
	If Msgbox2("Capture video from the Side Yard camera?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) = DialogResponse.POSITIVE Then 'ignore
		Try
			' Open Liveview by clicking notification via Tasker intent
			Dim Intent1 As Intent
			Intent1.Initialize("blink.liveview.sideyard", "")
			Dim Phone As Phone
			Phone.SendBroadcastIntent(Intent1)
			
			btnSideYard.Enabled = False
			btnRefresh.Enabled = False
			btnSideYardNewClip.Enabled = False
			btnFrontYardNewClip.Enabled = False
			btnBackyardNewClip.Enabled = False
			btnSideYardRefresh.Enabled = False
			btnFrontYardRefresh.Enabled = False
			btnBackyardRefresh.Enabled = False
			swArmed.Enabled = False
			ivSideYard.Enabled = False
			ivFrontYard.Enabled = False
			ivBackyard.Enabled = False
			lblStatus.Text = "Capturing a new Side Yard video clip..."
			
			Dim rs As ResumableSub = RESTPost("https://rest-" & userRegion & ".immedia-semi.com/network/" & networkID & "/camera/347574/clip")
			wait for (rs) complete (Result As Object)
			If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
				btnSideYard.Enabled = True
				btnRefresh.Enabled = True
				btnSideYardNewClip.Enabled = True
				btnFrontYardNewClip.Enabled = True
				btnBackyardNewClip.Enabled = True
				btnSideYardRefresh.Enabled = True
				btnFrontYardRefresh.Enabled = True
				btnBackyardRefresh.Enabled = True
				ivSideYard.Enabled = True
				ivFrontYard.Enabled = True
				ivBackyard.Enabled = True
				swArmed.Enabled = True
				lblStatus.Text = response
				Return
			End If
			
			Dim rs As ResumableSub = GetCommandID(response)
			wait for (rs) complete (Result As Object)
			
			Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
			wait for (rs) complete (Result As Object)

			For i = 1 To 60
				
				Dim rs As ResumableSub = GetCommandStatus(response)
				wait for (rs) complete (Result As Object)
				If commandComplete Then
'					For i = 3 To 1 Step -1
'						lblStatus.Text = "New SideYard video clip will be shown in " & i & " seconds..."
'						Sleep(1000)
'					Next
					Dim rs As ResumableSub = GetUnwatchedVideos
					wait for (rs) complete (Result As Object)
					Exit
				Else
					lblStatus.Text = "Awaiting for the Side Yard video clip... " & i & "/60"
				End If
				
				Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
				wait for (rs) complete (Result As Object)
				Sleep(1000)
			Next
		Catch
			Log(LastException)
		End Try
		btnSideYard.Enabled = True
		btnRefresh.Enabled = True
		btnSideYardNewClip.Enabled = True
		btnFrontYardNewClip.Enabled = True
		btnBackyardNewClip.Enabled = True
		btnSideYardRefresh.Enabled = True
		btnFrontYardRefresh.Enabled = True
		btnBackyardRefresh.Enabled = True
		ivSideYard.Enabled = True
		ivFrontYard.Enabled = True
		ivBackyard.Enabled = True
		swArmed.Enabled = True
		lblStatus.Text = "Ready"
	End If
End Sub

Sub btnFrontYardNewClip_Click
	Dim bd As BitmapDrawable
	bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
	If Msgbox2("Capture video from the Front Yard camera?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) = DialogResponse.POSITIVE Then 'ignore
		Try
			' Open Liveview by clicking notification via Tasker intent
			Dim Intent1 As Intent
			Intent1.Initialize("blink.liveview.frontyard", "")
			Dim Phone As Phone
			Phone.SendBroadcastIntent(Intent1)
			
			ScrollViewBlink.ScrollToNow(0)
			btnSideYard.Enabled = False
			btnRefresh.Enabled = False
			btnSideYardNewClip.Enabled = False
			btnFrontYardNewClip.Enabled = False
			btnBackyardNewClip.Enabled = False
			btnSideYardRefresh.Enabled = False
			btnFrontYardRefresh.Enabled = False
			btnBackyardRefresh.Enabled = False
			swArmed.Enabled = False
			ivSideYard.Enabled = False
			ivFrontYard.Enabled = False
			ivBackyard.Enabled = False
			lblStatus.Text = "Capturing a new Front Yard video clip..."
			
			Dim rs As ResumableSub = RESTPost("https://rest-" & userRegion & ".immedia-semi.com/network/" & networkID & "/camera/236967/clip")
			wait for (rs) complete (Result As Object)
			If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
				btnSideYard.Enabled = True
				btnRefresh.Enabled = True
				btnSideYardNewClip.Enabled = True
				btnFrontYardNewClip.Enabled = True
				btnBackyardNewClip.Enabled = True
				btnSideYardRefresh.Enabled = True
				btnFrontYardRefresh.Enabled = True
				btnBackyardRefresh.Enabled = True
				ivSideYard.Enabled = True
				ivFrontYard.Enabled = True
				ivBackyard.Enabled = True
				swArmed.Enabled = True
				lblStatus.Text = response
				Return
			End If
			
			Dim rs As ResumableSub = GetCommandID(response)
			wait for (rs) complete (Result As Object)
			
			Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
			wait for (rs) complete (Result As Object)
			For i = 1 To 60
				
				Dim rs As ResumableSub = GetCommandStatus(response)
				wait for (rs) complete (Result As Object)
				If commandComplete Then
					Dim rs As ResumableSub = GetUnwatchedVideos
					wait for (rs) complete (Result As Object)
					Exit
				Else
					lblStatus.Text = "Awaiting for the Front Yard video clip... " & i & "/60"
				End If
				
				Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
				wait for (rs) complete (Result As Object)
				Sleep(1000)
			Next
		Catch
			Log(LastException)
		End Try
		btnSideYard.Enabled = True
		btnRefresh.Enabled = True
		btnSideYardNewClip.Enabled = True
		btnFrontYardNewClip.Enabled = True
		btnBackyardNewClip.Enabled = True
		btnSideYardRefresh.Enabled = True
		btnFrontYardRefresh.Enabled = True
		btnBackyardRefresh.Enabled = True
		ivSideYard.Enabled = True
		ivFrontYard.Enabled = True
		ivBackyard.Enabled = True
		swArmed.Enabled = True
		lblStatus.Text = "Ready"
	End If
End Sub

Sub btnBackyardNewClip_Click
	Dim bd As BitmapDrawable
	bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
	If Msgbox2("Capture video from the Backyard camera?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) = DialogResponse.POSITIVE Then 'ignore
		Try
			' Open Liveview by clicking notification via Tasker intent
			Dim Intent1 As Intent
			Intent1.Initialize("blink.liveview.backyard", "")
			Dim Phone As Phone
			Phone.SendBroadcastIntent(Intent1)
			
			ScrollViewBlink.ScrollToNow(0)
			btnSideYard.Enabled = False
			btnRefresh.Enabled = False
			btnSideYardNewClip.Enabled = False
			btnFrontYardNewClip.Enabled = False
			btnSideYardRefresh.Enabled = False
			btnFrontYardRefresh.Enabled = False
			btnBackyardRefresh.Enabled = False
			swArmed.Enabled = False
			ivSideYard.Enabled = False
			ivFrontYard.Enabled = False
			ivBackyard.Enabled = False
			lblStatus.Text = "Capturing a new Backyard video clip..."
			
			Dim rs As ResumableSub = RESTPost("https://rest-" & userRegion & ".immedia-semi.com/network/" & networkID & "/camera/458236/clip")
			wait for (rs) complete (Result As Object)
			If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
				btnSideYard.Enabled = True
				btnRefresh.Enabled = True
				btnSideYardNewClip.Enabled = True
				btnFrontYardNewClip.Enabled = True
				btnBackyardNewClip.Enabled = True
				btnSideYardRefresh.Enabled = True
				btnFrontYardRefresh.Enabled = True
				btnBackyardRefresh.Enabled = True
				ivSideYard.Enabled = True
				ivFrontYard.Enabled = True
				ivBackyard.Enabled = True
				swArmed.Enabled = True
				lblStatus.Text = response
				Return
			End If
			
			Dim rs As ResumableSub = GetCommandID(response)
			wait for (rs) complete (Result As Object)
			
			Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
			wait for (rs) complete (Result As Object)
			For i = 1 To 60
				
				Dim rs As ResumableSub = GetCommandStatus(response)
				wait for (rs) complete (Result As Object)
				If commandComplete Then
'					For i = 3 To 1 Step -1
'						lblStatus.Text = "New Backyard video clip will be shown in " & i & " seconds..."
'						Sleep(1000)
'					Next
					Dim rs As ResumableSub = GetUnwatchedVideos
					wait for (rs) complete (Result As Object)
					Exit
				Else
					lblStatus.Text = "Awaiting for the Backyard video clip... " & i & "/60"
				End If
				
				Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
				wait for (rs) complete (Result As Object)
				Sleep(1000)
			Next
		Catch
			Log(LastException)
		End Try
		btnSideYard.Enabled = True
		btnRefresh.Enabled = True
		btnSideYardNewClip.Enabled = True
		btnFrontYardNewClip.Enabled = True
		btnBackyardNewClip.Enabled = True
		btnSideYardRefresh.Enabled = True
		btnFrontYardRefresh.Enabled = True
		btnBackyardRefresh.Enabled = True
		ivSideYard.Enabled = True
		ivFrontYard.Enabled = True
		ivBackyard.Enabled = True
		swArmed.Enabled = True
		lblStatus.Text = "Ready"
	End If
End Sub

Sub btnRefresh_Click
	btnSideYard.Enabled = False
	btnRefresh.Enabled = False
	btnSideYardNewClip.Enabled = False
	btnFrontYardNewClip.Enabled = False
	btnBackyardNewClip.Enabled = False
	btnSideYardRefresh.Enabled = False
	btnFrontYardRefresh.Enabled = False
	btnBackyardRefresh.Enabled = False
	swArmed.Enabled = False
	ivSideYard.Enabled = False
	ivFrontYard.Enabled = False
	ivBackyard.Enabled = False
	ScrollViewBlink.ScrollToNow(0)
	BlurIV("SideYard.jpg",ivSideYard)
	BlurIV("FrontYard.jpg",ivFrontYard)
	BlurIV("Backyard.jpg",ivBackyard)
	Dim rs As ResumableSub = RefreshCameras(True, "All")
	wait for (rs) complete (Result As Object)
	btnSideYard.Enabled = True
	btnRefresh.Enabled = True
	btnSideYardNewClip.Enabled = True
	btnFrontYardNewClip.Enabled = True
	btnBackyardNewClip.Enabled = True
	btnSideYardRefresh.Enabled = True
	btnFrontYardRefresh.Enabled = True
	btnBackyardRefresh.Enabled = True
	ivSideYard.Enabled = True
	ivFrontYard.Enabled = True
	ivBackyard.Enabled = True
	swArmed.Enabled = True
End Sub

Sub DownloadImageFullscreen (Link As String, camera As String) As ResumableSub'ignore
	Try
		Dim j As HttpJob
		response = ""
		j.Initialize("", Me)
		j.Download(Link)
		j.GetRequest.SetHeader("TOKEN_AUTH", authToken)
		Wait For (j) JobDone(j As HttpJob)
		If j.Success Then
			
			Dim out As OutputStream = File.OpenOutput(File.DirInternal, "screenshot.jpg", False)
			File.Copy2(j.GetInputStream, out)
			out.Close '<------ very important
			
			Dim FileName As String = "screenshot.jpg"
			If File.Exists(File.DirInternal, FileName) Then
				File.Copy(File.DirInternal, FileName, Starter.Provider.SharedFolder, FileName)
				Dim in As Intent
				in.Initialize(in.ACTION_VIEW, "")
				Starter.Provider.SetFileUriAsIntentData(in, FileName)
				'Type must be set after calling SetFileUriAsIntentData
				in.SetType("image/*")
				StartActivity(in)
			End If
		Else
			response = "ERROR: " & j.ErrorMessage
			lblStatus.Text = GetRESTError(j.ErrorMessage)
		End If
		j.Release
	Catch
		Log(LastException)
	End Try
	Return Null
End Sub

Sub ivPlay_Click
	Try
		Dim p As Phone
		p.SetMute(3,True)
		
		B4XLoadingIndicator4.Show
		wvMedia.LoadUrl("")
		
		If previousSelectedIndex > (clvActivity.Size-1) Then
			previousSelectedIndex = 0
		End If
		
		Dim cd As CardData = clvActivity.GetValue(previousSelectedIndex)
		Dim rs As ResumableSub = ShowVideo(cd.mediaURL)
		wait for (rs) complete (Result As Object)
		
		Dim FileName As String
		FileName = cd.mediaURL.SubString(cd.mediaURL.LastIndexOf("/")+1)
				
		If File.Exists(File.DirInternal, FileName) Then
			File.Copy(File.DirInternal, FileName, Starter.Provider.SharedFolder, FileName)
			Dim in As Intent
			in.Initialize(in.ACTION_VIEW, "")
			Starter.Provider.SetFileUriAsIntentData(in, FileName)
			'Type must be set after calling SetFileUriAsIntentData
			in.SetType("video/*")
			StartActivity(in)
		End If
	Catch
		Log(LastException)
	End Try
	B4XLoadingIndicator4.Hide
End Sub

#if Java
//Sources:
//https://medium.com/@ssaurel/how-to-auto-restart-an-android-application-after-a-crash-or-a-force-close-error-1a361677c0ce
//https://stackoverflow.com/a/2903866
//https://mobikul.com/auto-restart-application-crashforce-close-android/

public void setDefaultUncaughtExceptionHandler() {
   
   Thread.setDefaultUncaughtExceptionHandler(new MyExceptionHandler(this));
}

import android.app.Activity;

public class MyExceptionHandler implements Thread.UncaughtExceptionHandler {

  private Activity activity;

  public MyExceptionHandler(Activity a) {
    activity = a;
  }

  @Override
  public void uncaughtException(Thread thread, Throwable ex) {
    activity.finish();
    System.exit(2);
  }
}
#End if

Sub btnBackyardRefresh_Click
	btnSideYard.Enabled = False
	btnRefresh.Enabled = False
	btnSideYardNewClip.Enabled = False
	btnFrontYardNewClip.Enabled = False
	btnBackyardNewClip.Enabled = False
	btnSideYardRefresh.Enabled = False
	btnFrontYardRefresh.Enabled = False
	btnBackyardRefresh.Enabled = False
	swArmed.Enabled = False
	ivSideYard.Enabled = False
	ivFrontYard.Enabled = False
	ivBackyard.Enabled = False
	ScrollViewBlink.ScrollToNow(0)
	BlurIV("Backyard.jpg",ivBackyard)
	Dim rs As ResumableSub = RefreshCameras(False, "458236")
	wait for (rs) complete (Result As Object)
	btnSideYard.Enabled = True
	btnRefresh.Enabled = True
	btnSideYardNewClip.Enabled = True
	btnFrontYardNewClip.Enabled = True
	btnBackyardNewClip.Enabled = True
	btnSideYardRefresh.Enabled = True
	btnFrontYardRefresh.Enabled = True
	btnBackyardRefresh.Enabled = True
	ivSideYard.Enabled = True
	ivFrontYard.Enabled = True
	ivBackyard.Enabled = True
	swArmed.Enabled = True
End Sub

Sub btnFrontYardRefresh_Click
	btnSideYard.Enabled = False
	btnRefresh.Enabled = False
	btnSideYardNewClip.Enabled = False
	btnFrontYardNewClip.Enabled = False
	btnBackyardNewClip.Enabled = False
	btnSideYardRefresh.Enabled = False
	btnFrontYardRefresh.Enabled = False
	btnBackyardRefresh.Enabled = False
	swArmed.Enabled = False
	ivSideYard.Enabled = False
	ivFrontYard.Enabled = False
	ivBackyard.Enabled = False
	ScrollViewBlink.ScrollToNow(0)
	BlurIV("FrontYard.jpg",ivFrontYard)
	Dim rs As ResumableSub = RefreshCameras(False, "236967")
	wait for (rs) complete (Result As Object)
	btnSideYard.Enabled = True
	btnRefresh.Enabled = True
	btnSideYardNewClip.Enabled = True
	btnFrontYardNewClip.Enabled = True
	btnBackyardNewClip.Enabled = True
	btnSideYardRefresh.Enabled = True
	btnFrontYardRefresh.Enabled = True
	btnBackyardRefresh.Enabled = True
	ivSideYard.Enabled = True
	ivFrontYard.Enabled = True
	ivBackyard.Enabled = True
	swArmed.Enabled = True
End Sub

Sub btnSideYardRefresh_Click
	btnSideYard.Enabled = False
	btnRefresh.Enabled = False
	btnSideYardNewClip.Enabled = False
	btnFrontYardNewClip.Enabled = False
	btnBackyardNewClip.Enabled = False
	btnSideYardRefresh.Enabled = False
	btnFrontYardRefresh.Enabled = False
	btnBackyardRefresh.Enabled = False
	swArmed.Enabled = False
	ivSideYard.Enabled = False
	ivFrontYard.Enabled = False
	ivBackyard.Enabled = False
	ScrollViewBlink.ScrollToNow(0)
	BlurIV("SideYard.jpg",ivSideYard)
	Dim rs As ResumableSub = RefreshCameras(False, "347574")
	wait for (rs) complete (Result As Object)
	btnSideYard.Enabled = True
	btnRefresh.Enabled = True
	btnSideYardNewClip.Enabled = True
	btnFrontYardNewClip.Enabled = True
	btnBackyardNewClip.Enabled = True
	btnSideYardRefresh.Enabled = True
	btnFrontYardRefresh.Enabled = True
	btnBackyardRefresh.Enabled = True
	ivSideYard.Enabled = True
	ivFrontYard.Enabled = True
	ivBackyard.Enabled = True
	swArmed.Enabled = True
End Sub

Sub swArmed_ValueChanged (Value As Boolean)
	Try
		btnSideYard.Enabled = False
		btnRefresh.Enabled = False
		btnSideYardNewClip.Enabled = False
		btnFrontYardNewClip.Enabled = False
		btnBackyardNewClip.Enabled = False
		btnSideYardRefresh.Enabled = False
		btnFrontYardRefresh.Enabled = False
		btnBackyardRefresh.Enabled = False
		ivSideYard.Enabled = False
		ivFrontYard.Enabled = False
		ivBackyard.Enabled = False
		
		ScrollViewBlink.ScrollToNow(0)
		
		If Value Then
			lblStatus.Text = "Arming the system..."
			Dim rs As ResumableSub = RESTPost("https://rest-" & userRegion & ".immedia-semi.com/network/" & networkID & "/arm")
		Else
			lblStatus.Text = "Disarming the system..."
			Dim rs As ResumableSub = RESTPost("https://rest-" & userRegion & ".immedia-semi.com/network/" & networkID & "/disarm")
		End If
		
		wait for (rs) complete (Result As Object)
		
		If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Or response.Contains("Command not found") Then
			btnSideYard.Enabled = True
			btnRefresh.Enabled = True
			btnSideYardNewClip.Enabled = True
			btnFrontYardNewClip.Enabled = True
			btnBackyardNewClip.Enabled = True
			btnSideYardRefresh.Enabled = True
			btnFrontYardRefresh.Enabled = True
			btnBackyardRefresh.Enabled = True
			ivSideYard.Enabled = True
			ivFrontYard.Enabled = True
			ivBackyard.Enabled = True
			lblStatus.Text = GetRESTError(response)
			swArmed.Value = Not(Value)
			Return
		End If
		Dim rs As ResumableSub = GetCommandID(response)
		wait for (rs) complete (Result As Object)
		
		Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
		wait for (rs) complete (Result As Object)
		
		For i = 1 To 10
			Dim rs As ResumableSub = GetCommandStatus(response)
			wait for (rs) complete (Result As Object)
			If commandComplete Then
				btnRefresh_Click
				Exit
			Else
				If Value Then
					lblStatus.Text = "Arming the system... " & i & "/10"
				Else
					lblStatus.Text = "Disarming the system... " & i & "/10"
				End If
			End If
			Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
			wait for (rs) complete (Result As Object)
			Sleep(1000)
			
			If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Or response.Contains("Command not found") Then
				btnSideYard.Enabled = True
				btnRefresh.Enabled = True
				btnSideYardNewClip.Enabled = True
				btnFrontYardNewClip.Enabled = True
				btnBackyardNewClip.Enabled = True
				btnSideYardRefresh.Enabled = True
				btnFrontYardRefresh.Enabled = True
				btnBackyardRefresh.Enabled = True
				ivSideYard.Enabled = True
				ivFrontYard.Enabled = True
				ivBackyard.Enabled = True
				lblStatus.Text = GetRESTError(response)
				swArmed.Value = Not(Value)
				Return
			End If
		Next
		
		btnSideYard.Enabled = True
		btnRefresh.Enabled = True
		btnSideYardNewClip.Enabled = True
		btnFrontYardNewClip.Enabled = True
		btnBackyardNewClip.Enabled = True
		btnSideYardRefresh.Enabled = True
		btnFrontYardRefresh.Enabled = True
		btnBackyardRefresh.Enabled = True
		ivSideYard.Enabled = True
		ivFrontYard.Enabled = True
		ivBackyard.Enabled = True
		lblStatus.Text = "Ready"
		
	Catch
		Log(LastException)
	End Try
End Sub

Sub RandomString(length As Int) As String
	Dim abc As String = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
	Dim randomstr As String = ""
	For i = 0 To length - 1
		randomstr = randomstr & (abc.CharAt(Rnd(0,abc.Length)))
	Next
	Return randomstr
End Sub

Sub CheckDataFile(filename As String)
	If File.Exists(File.DirInternal, filename) Then
		If filename = "account.txt" Then
			Dim List1 As List
			List1.Initialize
			List1 = File.ReadList(File.DirInternal, filename)
			For i = 0 To List1.Size - 1
				If i = 0 Then
					emailAddress = List1.Get(i)
				Else if i = 1 Then
					password = List1.Get(i)
				End If
			Next
		End If
	Else If File.Exists(File.DirRootExternal,filename) Then
		File.Copy(File.DirRootExternal,filename,File.DirInternal, filename)
		If File.Exists(File.DirInternal, filename) Then
			If filename = "account.txt" Then
				Dim List1 As List
				List1.Initialize
				List1 = File.ReadList(File.DirInternal, filename)
				For i = 0 To List1.Size - 1
					If i = 0 Then
						emailAddress = List1.Get(i)
					Else if i = 1 Then
						password = List1.Get(i)
					End If
				Next
			End If
		Else
			Msgbox(filename & " not found","Smart Home Monitor") 'ignore
			ExitApplication
		End If
	Else
		Msgbox(filename & " not found","Smart Home Monitor") 'ignore
		ExitApplication
	End If
End Sub


'Sub btnNoteWyzeReset_Click
'	Try
'		' Reset Note 8 server via Tasker intent
'		Dim bd As BitmapDrawable
'		bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
'		If  Msgbox2("Restart Note 8 server?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) = DialogResponse.POSITIVE Then 'ignore
'			Dim Intent1 As Intent
'			Intent1.Initialize("note.wyze.restart", "")
'			Dim Phone As Phone
'			Phone.SendBroadcastIntent(Intent1)
'		End If
'	Catch
'		Log(LastException)
'	End Try
'End Sub

'Sub btnBackyardOutdoorLive_Click
'	Try
'		Dim bd As BitmapDrawable
'		bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
'		If Msgbox2("View live Backyard camera?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) = DialogResponse.POSITIVE Then 'ignore
'			startCameraByTag("Backyard Outdoor")
'		End If
'	Catch
'		Log(LastException)
'	End Try
'End Sub

'Sub startCameraByTag(camera As String)
'	'https://www.reddit.com/r/tinycam/comments/ies56t/_/
'
'	Try
'		Dim i As Intent
'		Dim const FLAG_ACTIVITY_CLEAR_TOP As Int = 0x04000000
'		Dim const FLAG_ACTIVITY_CLEAR_TASK As Int = 0x00008000
'		Dim const FLAG_ACTIVITY_NEW_TASK As Int = 0x10000000
'		
'		i.Initialize(i.ACTION_MAIN, "")
'		i.SetComponent("com.alexvas.dvr.pro/com.alexvas.dvr.activity.LiveViewActivity")
'		i.PutExtra("com.alexvas.dvr.intent.extra.shortcut.NAME",camera)
'		
'		' To view cameras for specific Tag. It doesn't work if there is only one camera in the Tag.
'			'i.PutExtra("com.alexvas.dvr.intent.extra.TAG_NAME","Outdoor")
'			'i.PutExtra("com.alexvas.dvr.intent.extra.PAGE",1) ' 1 which is the second parameter should be integer.
'		' To view cameras for specific Tag. It doesn't work if there is only one camera in the Tag.
'		i.Flags = Bit.Or(FLAG_ACTIVITY_CLEAR_TASK, Bit.Or(FLAG_ACTIVITY_CLEAR_TOP, FLAG_ACTIVITY_NEW_TASK))
'		StartActivity(i)
'Catch
'	Log(LastException)
'End Try
'
'End Sub



