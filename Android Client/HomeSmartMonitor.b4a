Build1=Default,cloyd.smart.home.monitor
File1=0.png
File10=crysta.ttf
File11=Main.bal
File12=ScrollViewBasement.bal
File13=TempHumidityBasement.bal
File2=1.bal
File3=1ScrollView.bal
File4=2.bal
File5=AirQualityBasement.bal
File6=blink.bal
File7=blinkscrollview.bal
File8=camera-icon.png
File9=cloyd.png
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
IconFile=
Library1=core
Library10=tabstripviewpager
Library11=reflection
Library12=notificationbuilder
Library13=notificationlistener
Library14=randomaccessfile
Library15=dateutils
Library16=ahpreferenceactivity
Library17=okhttputils2
Library18=xcustomlistview
Library19=json
Library2=appcompat
Library20=bitmapcreator
Library21=xui views
Library22=runtimepermissions
Library3=javaobject
Library4=xmllayoutbuilder
Library5=jmqtt
Library6=callsubutils
Library7=byteconverter
Library8=xui
Library9=phone
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.basic4ppc.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="7" android:targetSdkVersion="26"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'End of default text.~\n~~\n~SetApplicationAttribute(android:theme, "@style/MyAppTheme")~\n~CreateResource(values, colors.xml,~\n~<resources>~\n~    <color name="actionbar">#90a4ae</color>~\n~   <color name="statusbar">#62757f</color>~\n~   <color name="textColorPrimary">#000000</color>~\n~   <color name="navigationBar">#90a4ae</color>~\n~</resources>~\n~)~\n~CreateResource(values, theme.xml,~\n~<resources>~\n~    <style name="MyAppTheme" parent="Theme.AppCompat.Light">~\n~        <item name="colorPrimary">@color/actionbar</item>~\n~        <item name="colorPrimaryDark">@color/statusbar</item>~\n~       <item name="android:textColorPrimary">@color/textColorPrimary</item>~\n~       <item name="android:navigationBarColor">@color/navigationBar</item>~\n~       <item name="windowNoTitle">true</item>~\n~       <item name="windowActionBar">false</item>~\n~       <item name="windowActionModeOverlay">true</item>~\n~    </style>~\n~	<style name="ToolbarMenu" parent="Base.ThemeOverlay.AppCompat.ActionBar">~\n~	    <item name="android:textColorPrimary">#000000</item>~\n~	    <item name="android:colorBackground">#B0BEC5</item>~\n~    </style>~\n~</resources>~\n~)~\n~~\n~AddApplicationText(~\n~<service android:name="anywheresoftware.b4a.objects.NotificationListenerWrapper"~\n~   android:label="Smart Home Monitor"~\n~  android:permission="android.permission.BIND_NOTIFICATION_LISTENER_SERVICE">~\n~  <intent-filter>~\n~  <action android:name="android.service.notification.NotificationListenerService" />~\n~  </intent-filter>~\n~</service>)~\n~~\n~AddApplicationText(~\n~<activity~\n~  android:name="de.amberhome.objects.preferenceactivity"~\n~  android:theme="@android:style/Theme.Material.Light">~\n~</activity>~\n~)~\n~~\n~AddManifestText(~\n~<uses-permission~\n~  android:name="android.permission.WRITE_EXTERNAL_STORAGE"~\n~  android:maxSdkVersion="18" />~\n~)
Module1=Gauge
Module2=SmartHomeMonitor
Module3=NotificationService
Module4=StateManager
NumberOfFiles=13
NumberOfLibraries=22
NumberOfModules=4
Version=9.5
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: Smart Home Monitor
	#VersionCode: 2088
	#VersionName: 2.0.8.8
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
	#BridgeLogger:True
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region
	#AdditionalRes: "..\resource"
	#Extends: android.support.v7.app.AppCompatActivity
	#AdditionalJar: com.android.support:support-v4
	
Sub Process_Globals
	Private MQTT As MqttClient
	Private MQTTUser As String = "vynckfaq"
	Private MQTTPassword As String = "KHSV1Q1qSUUY"
	Private MQTTServerURI As String = "tcp://m14.cloudmqtt.com:11816"
	Private bc As ByteConverter
	Private csu As CallSubUtils
	Private OldIntent As Intent
	Dim manager As AHPreferenceManager
	Dim screen As AHPreferenceScreen
	
	Private emailAddress As String = "[redacted]"
	Private password As String = "[redacted]"
	Private authToken As String
	Private userRegion As String
	Private accountID As String
	Private networkID As String
	Private commandID As String
	Private commandComplete As Boolean
	Private cameraThumbnail As String
	Private response As String
End Sub

Sub Globals
	Private ACToolBarLight1 As ACToolBarLight
	Private ToolbarHelper As ACActionBar
	Private gblACMenu As ACMenu
	Private xui As XUI
	Private GaugeHumidity As Gauge
	Private GaugeTemp As Gauge
	Private GaugeDewPoint As Gauge
	Private GaugeHeatIndex As Gauge
	Private lblComfort As Label
	Private lblPerception As Label
	Private lblLastUpdate As Label
	Private lblPing As Label
	Private TabStrip1 As TabStrip
	Private lblFontAwesome As Label
	Private GaugeAirQuality As Gauge
	Private lblAirQuality As Label
	Private lblAirQualityLastUpdate As Label
	Private ScrollView1 As ScrollView
	Private Panel1 As Panel
	Private GaugeAirQualityBasement As Gauge
	Private lblAirQualityBasement As Label
	Private lblAirQualityLastUpdateBasement As Label
	Private PanelAirQualityBasement As Panel
	Private GaugeDewPointBasement As Gauge
	Private GaugeHeatIndexBasement As Gauge
	Private GaugeHumidityBasement As Gauge
	Private GaugeTempBasement As Gauge
	Private lblComfortBasement As Label
	Private lblLastUpdateBasement As Label
	Private lblPerceptionBasement As Label
	Private lblPingBasement As Label
	Private ScrollViewBasement As ScrollView
	Private PanelTempHumidityBasement As Panel
	Private lblStatus As Label
	Private ivDriveway As ImageView
	Private ivFrontDoor As ImageView
	Private ivSideYard As ImageView
	Private ScrollViewBlink As ScrollView
	Private panelBlink As Panel
	Private lblDriveway As Label
	Private lblFrontDoor As Label
	Private lblSideYard As Label
	Private btnDriveway As Button
	Private lblDrivewayBatt As Label
	Private lblDrivewayTimestamp As Label
	Private lblDrivewayWifi As Label
	Private lblFrontDoorBatt As Label
	Private lblFrontDoorTimestamp As Label
	Private lblFrontDoorWiFi As Label
	Private lblSideYardBatt As Label
	Private lblSideYardTimestamp As Label
	Private lblSideYardWiFi As Label
	Private lblSyncModule As Label
End Sub

Sub Activity_Create(FirstTime As Boolean)
	Try
		If FirstTime Then
			CreatePreferenceScreen
			If manager.GetAll.Size = 0 Then SetDefaults
			
			StartService(SmartHomeMonitor)
			csu.Initialize
			MQTT_Connect
		End If
		Activity.LoadLayout("Main")

		TabStrip1.LoadLayout("1ScrollView", "LIVING AREA" & CRLF & "Temp & Humidity  " & Chr(0xF2C7))
		ScrollView1.Panel.LoadLayout("1")
		Panel1.Height = ScrollView1.Height 'Panel1.Height + 100dip
		ScrollView1.Panel.Height = Panel1.Height
		TabStrip1.LoadLayout("2", "LIVING AREA" & CRLF & "Air Quality (CO)  " & Chr(0xF289))
		TabStrip1.LoadLayout("ScrollViewBasement", "BASEMENT" & CRLF & "Temp & Humidity  " & Chr(0xF2C7))
		ScrollViewBasement.Panel.LoadLayout("TempHumidityBasement")
		PanelTempHumidityBasement.Height = ScrollViewBasement.Height 'PanelTempHumidityBasement.Height + 100dip
		ScrollViewBasement.Panel.Height = PanelTempHumidityBasement.Height
		TabStrip1.LoadLayout("AirQualityBasement", "BASEMENT" & CRLF & "Air Quality (CO)  " & Chr(0xF289))
		TabStrip1.LoadLayout("blinkscrollview", "OUTSIDE" & CRLF & "Security Camera  " & Chr(0xF030))
		ScrollViewBlink.Panel.LoadLayout("blink")
		'https://www.b4x.com/android/forum/threads/how-to-create-a-scrollable-screen.102755/#post-644462
		ScrollViewBlink.panel.height = 910dip
		panelBlink.Height = 910dip
		
		For Each lbl As Label In GetAllTabLabels(TabStrip1)
			' Two lines in a tab of TabStripViewPager
			lbl.SingleLine = False
			' To add icon
			lbl.Typeface = Typeface.FONTAWESOME
			' To add space around the label text
			lbl.Padding = Array As Int(0, 0, 0, 0)
			
		Next
		
		For Each v As View In GetAllTabLabels(TabStrip1)
			' To equally align the tab headers
			v.Width = 33%x
		Next
		
		Dim bd As BitmapDrawable
		bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
		ACToolBarLight1.NavigationIconDrawable = bd
		ToolbarHelper.Initialize
		Dim cs As CSBuilder
		ToolbarHelper.Title= cs.Initialize.Size(22).Append("Smart Home Monitor").PopAll
		ToolbarHelper.subTitle = ""
		ToolbarHelper.ShowUpIndicator = False 'set to true to show the up arrow
		ACToolBarLight1.InitMenuListener
		Dim jo As JavaObject = ACToolBarLight1
		Dim xl As XmlLayoutBuilder
		jo.RunMethod("setPopupTheme", Array(xl.GetResourceId("style", "ToolbarMenu")))
		
		GaugeHumidity.SetRanges(Array(GaugeHumidity.CreateRange(0, 70, xui.Color_RGB(100,221,23)), _
		GaugeHumidity.CreateRange(70, 80, xui.Color_Yellow), _
		GaugeHumidity.CreateRange(80, 100, xui.Color_Red)))
		GaugeTemp.SetRanges(Array(GaugeTemp.CreateRange(0, 75, xui.Color_RGB(100,221,23)), _
	    GaugeTemp.CreateRange(75, 90, xui.Color_Yellow), _
	    GaugeTemp.CreateRange(90, 100, xui.Color_Red)))	
		GaugeHeatIndex.SetRanges(Array(GaugeHeatIndex.CreateRange(0, 75, xui.Color_RGB(100,221,23)), _
	    GaugeHeatIndex.CreateRange(75, 90, xui.Color_Yellow), _
	    GaugeHeatIndex.CreateRange(90, 100, xui.Color_Red)))
		' Dew Point
		' https://material.io/guidelines/style/color.html#
		GaugeDewPoint.SetRanges(Array(GaugeDewPoint.CreateRange(0,60.8, xui.Color_RGB(100,221,23)), _
		GaugeDewPoint.CreateRange(60.8,64.4, xui.Color_RGB(100,240,23)), _
		GaugeDewPoint.CreateRange(64.4,78.8, xui.Color_Yellow), _
	    GaugeDewPoint.CreateRange(78.8, 100, xui.Color_Red)))
		' Dew Point
		
		GaugeAirQuality.SetRanges(Array(GaugeAirQuality.CreateRange(0, 100, xui.Color_RGB(100,221,23)), _
		GaugeAirQuality.CreateRange(100, 400, xui.Color_RGB(100,240,23)), _
	    GaugeAirQuality.CreateRange(400, 900, xui.Color_Yellow), _
	    GaugeAirQuality.CreateRange(900, 1000, xui.Color_Red)))	
		GaugeAirQuality.CurrentValue=0
		
		GaugeHumidityBasement.SetRanges(Array(GaugeHumidityBasement.CreateRange(0, 70, xui.Color_RGB(100,221,23)), _
		GaugeHumidityBasement.CreateRange(70, 80, xui.Color_Yellow), _
		GaugeHumidityBasement.CreateRange(80, 100, xui.Color_Red)))
		GaugeTempBasement.SetRanges(Array(GaugeTempBasement.CreateRange(0, 75, xui.Color_RGB(100,221,23)), _
	    GaugeTempBasement.CreateRange(75, 90, xui.Color_Yellow), _
	    GaugeTempBasement.CreateRange(90, 100, xui.Color_Red)))	
		GaugeHeatIndexBasement.SetRanges(Array(GaugeHeatIndexBasement.CreateRange(0, 75, xui.Color_RGB(100,221,23)), _
	    GaugeHeatIndexBasement.CreateRange(75, 90, xui.Color_Yellow), _
	    GaugeHeatIndexBasement.CreateRange(90, 100, xui.Color_Red)))
		' Dew Point
		' https://material.io/guidelines/style/color.html#
		GaugeDewPointBasement.SetRanges(Array(GaugeDewPointBasement.CreateRange(0,60.8, xui.Color_RGB(100,221,23)), _
		GaugeDewPointBasement.CreateRange(60.8,64.4, xui.Color_RGB(100,240,23)), _
		GaugeDewPointBasement.CreateRange(64.4,78.8, xui.Color_Yellow), _
	    GaugeDewPointBasement.CreateRange(78.8, 100, xui.Color_Red)))
		' Dew Point
		
		GaugeAirQualityBasement.SetRanges(Array(GaugeAirQualityBasement.CreateRange(0, 100, xui.Color_RGB(100,221,23)), _
		GaugeAirQualityBasement.CreateRange(100, 400, xui.Color_RGB(100,240,23)), _
	    GaugeAirQualityBasement.CreateRange(400, 900, xui.Color_Yellow), _
	    GaugeAirQualityBasement.CreateRange(900, 1000, xui.Color_Red)))	
		GaugeAirQualityBasement.CurrentValue=0
		
		Dim cs As CSBuilder
		cs.Initialize
		lblPerception.Text = cs.Initialize.Bold.Append("Human Perception: ").Pop.Append("Waiting for data...").PopAll
		lblComfort.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Append("Waiting for data...").PopAll
		DateTime.DateFormat = "MMMM d, h:mm:ss a"
		lblLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append("").PopAll
		lblPing.Visible = False
		GaugeAirQuality.CurrentValue = 0
		GaugeAirQualityBasement.CurrentValue = 0
		lblAirQuality.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Append("Waiting for data...").PopAll
		lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").PopAll
		
		lblPerceptionBasement.Text = cs.Initialize.Bold.Append("Human Perception: ").Pop.Append("Waiting for data...").PopAll
		lblComfortBasement.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Append("Waiting for data...").PopAll
		DateTime.DateFormat = "MMMM d, h:mm:ss a"
		lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append("").PopAll
		lblPingBasement.Visible = False
		lblAirQualityBasement.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Append("Waiting for data...").PopAll
		lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").PopAll
		
		If MQTT.IsInitialized And MQTT.Connected  Then
			MQTT.Publish("TempHumid", bc.StringToBytes("Read weather", "utf8"))
			
			Dim strHumidityAddValue As String = StateManager.GetSetting("HumidityAddValue")
			If strHumidityAddValue = "" Then
				strHumidityAddValue = "0"
			End If
			MQTT.Publish("HumidityAddValue", bc.StringToBytes(strHumidityAddValue, "utf8"))
		End If
		
		SetTextShadow(lblDriveway)
		SetTextShadow(lblDrivewayBatt)
		SetTextShadow(lblDrivewayTimestamp)
		SetTextShadow(lblDrivewayWifi)
		SetTextShadow(lblFrontDoor)
		SetTextShadow(lblFrontDoorBatt)
		SetTextShadow(lblFrontDoorTimestamp)
		SetTextShadow(lblFrontDoorWiFi)
		SetTextShadow(lblSideYard)
		SetTextShadow(lblSideYardBatt)
		SetTextShadow(lblSideYardTimestamp)
		SetTextShadow(lblSideYardWiFi)
		
		'Dim bmp As Bitmap = LoadBitmap(File.DirAssets, "camera-icon.png")
		'Dim bmp As Bitmap = LoadBitmapResize(File.DirAssets, "camera-icon.png", 64dip, 64dip, True)
		'btnDriveway.SetBackgroundImage(bmp).Gravity = Gravity.CENTER
	Catch
		ToastMessageShow(LastException,True)
	End Try
End Sub

Sub Activity_Resume
	Try
		HandleSettings
		Dim in As Intent = Activity.GetStartingIntent
		Dim NotificationClicked As String
		If in.IsInitialized And in <> OldIntent Then
			OldIntent = in
			If in.HasExtra("Notification_Tag") Then
				NotificationClicked = in.GetExtra("Notification_Tag")
			End If
		End If
		If NotificationClicked = "Living area temperature" Then
			TabStrip1.ScrollTo(0,False)
			TabStrip1_PageSelected(0)
		Else If NotificationClicked = "Living area carbon monoxide" Then
			TabStrip1.ScrollTo(1,False)
			TabStrip1_PageSelected(1)
		else If NotificationClicked = "Basement temperature" Then
			TabStrip1.ScrollTo(2,False)
			TabStrip1_PageSelected(2)
		Else If NotificationClicked = "Basement carbon monoxide" Then
			TabStrip1.ScrollTo(3,False)
			TabStrip1_PageSelected(3)
		Else If NotificationClicked = "Basement DHT22 sensor issue" Then
			TabStrip1.ScrollTo(2,False)
			TabStrip1_PageSelected(2)
		Else If NotificationClicked = "Living area DHT22 sensor issue" Then
			TabStrip1.ScrollTo(0,False)
			TabStrip1_PageSelected(0)
		Else If NotificationClicked = "Living area CO sensor issue" Then
			TabStrip1.ScrollTo(1,False)
			TabStrip1_PageSelected(1)
		Else If NotificationClicked = "Basement CO sensor issue" Then
			TabStrip1.ScrollTo(3,False)
			TabStrip1_PageSelected(3)
		Else
			TabStrip1.ScrollTo(0,False)
			TabStrip1_PageSelected(0)
		End If

	Catch
		Log(LastException)
	End Try
	
	Try
		If MQTT.IsInitialized = False Or MQTT.Connected = False Then
			MQTT_Connect
		End If
	Catch
		Log(LastException)
	End Try
End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub

'Connect to CloudMQTT broker
Sub MQTT_Connect
	Try
		Dim ClientId As String = Rnd(0, 999999999) 'create a unique id
		MQTT.Initialize("MQTT", MQTTServerURI, ClientId)

		Dim ConnOpt As MqttConnectOptions
		ConnOpt.Initialize(MQTTUser, MQTTPassword)
		MQTT.Connect2(ConnOpt)
	Catch
		Log("MQTT_Connect: " & LastException)
	End Try
End Sub

Sub MQTT_Connected (Success As Boolean)
	Try
		If Success = False Then
			Log(LastException)
			MQTT_Connect
		Else
			Log("Connected to MQTT broker")
			MQTT.Subscribe("TempHumid", 0)
			MQTT.Subscribe("MQ7", 0)
			MQTT.Subscribe("MQ7Basement", 0)
			MQTT.Subscribe("TempHumidBasement", 0)
			MQTT.Subscribe("HumidityAddValue", 0)
		End If
	Catch
		Log("MQTT_Connected: " & LastException)
	End Try
End Sub

Private Sub MQTT_Disconnected
	Try
		gblACMenu.Clear
		gblACMenu.Add(0, 0, "Settings",Null)
		'gblACMenu.Add(0, 0, "Restart board",Null)
		gblACMenu.Add(0, 0, "About",Null)
		Log("Disconnected from MQTT broker")
		MQTT_Connect
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub MQTT_MessageArrived (Topic As String, Payload() As Byte)
	Try
		If Topic = "TempHumid" Then
			lblPing.SetVisibleAnimated(500, True)
			csu.CallSubPlus(Me, "HidePing", 700)
		
			CheckTempHumiditySetting
		Else If Topic = "MQ7" Then
			CheckAirQualitySetting
		Else If Topic = "MQ7Basement" Then
			CheckAirQualitySettingBasement
		Else If Topic = "TempHumidBasement" Then
			lblPingBasement.SetVisibleAnimated(500, True)
			csu.CallSubPlus(Me, "HidePingBasement", 700)
		
			CheckTempHumiditySettingBasement
		End If
	Catch
		Log(LastException)
	End Try
End Sub

Sub GetAirQuality(number As Int) As String
	' Detecting range: 10ppm-1000ppm carbon monoxide
	' Air quality-cases: < 100 perfect | 100 - 400 normal | > 400 - 900 high | > 900 abnormal
	If number <= 100 Then
		Return("Carbon monoxide perfect")
	else if ((number > 100) And (number < 400)) Or number = 400 Then
		Return("Carbon monoxide normal")
	else if ((number > 400) And (number < 900)) Or number = 900 Then
		Return("Carbon monoxide high")
	else If number > 900 Then
		Return("ALARM Carbon monoxide very high")
	Else
		Return("MQ-7 - cant read any value - check the sensor!")
	End If
End Sub

Sub GetPerception(DHT11Perception As String) As String
	' Return value       Dew point                        Human perception[6]
	'    7         Over 26 °C (>78.8°F)     Severely high, even deadly For asthma related illnesses
	'    6         24–26 °C (75.2-78.8°F)   Extremely uncomfortable, oppressive
	'    5         21–24 °C (69.8-75.2°F)   Very humid, quite uncomfortable
	'    4         18–21 °C (64.4-69.8°F)   Somewhat uncomfortable For most people at upper limit
	'    3         16–18 °C (60.8-64.4°F)   OK For most, but everyone perceives the humidity at upper limit
	'    2         13–16 °C (55.4-60.8°F)   Comfortable
	'    1         10–12 °C (50-53.6°F)     Very comfortable
	'    0         Under 10 °C (<50°F)      Feels like the western US, a Bit dry To some
	
	Dim localperception As String
	Select Case DHT11Perception
		Case 0
			localperception = "Feels like the western US, a bit dry to some"
		Case 1
			localperception = "Very comfortable"
		Case 2
			localperception = "Comfortable"
		Case 3
			localperception = "OK but humidity is at upper limit"
		Case 4
			localperception = "Uncomfortable and the humidity is at upper limit"
		Case 5
			localperception = "Very humid, quite uncomfortable"
		Case 6
			localperception = "Extremely uncomfortable, oppressive"
		Case 7
			localperception = "Severely high, even deadly for asthma related illnesses"
	End Select
	Return localperception
End Sub

Sub GetComfort(DHT11ComfortStatus As String) As String
	Dim localcomfortstatus As String
	Select Case DHT11ComfortStatus
		Case 0
			localcomfortstatus = "OK"
		Case 1
			localcomfortstatus = "Too hot"
		Case 2
			localcomfortstatus = "Too cold"
		Case 4
			localcomfortstatus = "Too dry"
		Case 5
			localcomfortstatus = "Hot and dry"
		Case 6
			localcomfortstatus = "Cold and dry"
		Case 8
			localcomfortstatus = "Too humid"
		Case 9
			localcomfortstatus = "Hot and humid"
		Case 10
			localcomfortstatus = "Cold and humid"
		Case Else
			localcomfortstatus = "Unknown"
	End Select
	Return localcomfortstatus
End Sub

Sub ACToolBarLight1_MenuItemClick (Item As ACMenuItem)
	Try
		If Item.Title = "About" Then
			ShowAboutMenu
		else if Item.Title = "Settings" Then
			StartActivity(screen.CreateIntent)
		else if Item.Title = "Restart board" Then
			Try
				Dim result As Int
				Dim bd As BitmapDrawable
				bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
				If TabStrip1.CurrentPage = 2 Then
					result = Msgbox2("Restart the BASEMENT controller?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap)
					If result = DialogResponse.POSITIVE Then
						If MQTT.IsInitialized = False Or MQTT.Connected = False Then
							MQTT_Connect
						End If
						MQTT.Publish("TempHumidBasement", bc.StringToBytes("Restart controller", "utf8"))
					End If
				else If TabStrip1.CurrentPage = 1 Then
					result = Msgbox2("Restart the AIR QUALITY controller?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap)
					If result = DialogResponse.POSITIVE Then
						If MQTT.IsInitialized = False Or MQTT.Connected = False Then
							MQTT_Connect
						End If
						MQTT.Publish("MQ7", bc.StringToBytes("Restart controller", "utf8"))
					End If
				else If TabStrip1.CurrentPage = 3 Then
					result = Msgbox2("Restart the BASEMENT AIR QUALITY controller?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap)
					If result = DialogResponse.POSITIVE Then
						If MQTT.IsInitialized = False Or MQTT.Connected = False Then
							MQTT_Connect
						End If
						MQTT.Publish("MQ7Basement", bc.StringToBytes("Restart controller", "utf8"))
					End If
				Else
					result = Msgbox2("Restart the WEATHER controller?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap)
					If result = DialogResponse.POSITIVE Then
						If MQTT.IsInitialized = False Or MQTT.Connected = False Then
							MQTT_Connect
						End If
						MQTT.Publish("TempHumid", bc.StringToBytes("Restart controller", "utf8"))
					End If
				End If
			Catch
				Log(LastException)
			End Try
		End If
	Catch
		Log(LastException)
	End Try
End Sub

Sub ShowAboutMenu
	Try
		Dim bd As BitmapDrawable
		bd.Initialize(LoadBitmapResize(File.DirAssets, "cloyd.png", 32dip, 32dip, True))
		Msgbox2("Smart Home Monitor v" & GetVersionCode & CRLF & CRLF & "Developed by Cloyd Nino Catanaoan" & CRLF & "September 22, 2019", "About", "OK", "", "", bd.Bitmap)
	Catch
		Log(LastException)
	End Try
End Sub

Sub GetVersionCode() As String
	Dim AppVersion As String
	Try
		Dim pm As PackageManager
		Dim packageName As String
		packageName =  Application.PackageName
		AppVersion = pm.GetVersionName(packageName)
	Catch
		Log(LastException)
	End Try
	Return AppVersion
End Sub

Sub Activity_Createmenu(Menu As ACMenu)
	Try
		Menu.Clear
		gblACMenu = Menu
		Menu.Add(0, 0, "Settings",Null)
		'Menu.Add(0, 0, "Restart board",Null)
		Menu.Add(0, 0, "About",Null)
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub HidePing
	lblPing.SetVisibleAnimated(200, False)
End Sub

Private Sub HidePingBasement
	lblPingBasement.SetVisibleAnimated(200, False)
End Sub


#If Java

public boolean _onCreateOptionsMenu(android.view.Menu menu) {
    if (processBA.subExists("activity_createmenu")) {
        processBA.raiseEvent2(null, true, "activity_createmenu", false, new de.amberhome.objects.appcompat.ACMenuWrapper(menu));
        return true;
    }
    else
        return false;
}
#End If

Sub TabStrip1_PageSelected (Position As Int)
	Try
		If Position = 0 Then
			If MQTT.IsInitialized And MQTT.Connected  Then
				MQTT.Publish("TempHumid", bc.StringToBytes("Read weather", "utf8"))
			End If
			CheckTempHumiditySetting
		End If
		If Position = 1 Then
			If MQTT.IsInitialized And MQTT.Connected  Then
				MQTT.Publish("MQ7", bc.StringToBytes("Read voltage", "utf8"))
			End If
			CheckAirQualitySetting
		End If
		If Position = 2 Then
			If MQTT.IsInitialized And MQTT.Connected  Then
				MQTT.Publish("TempHumidBasement", bc.StringToBytes("Read weather", "utf8"))
			End If
			CheckTempHumiditySettingBasement
		End If
		If Position = 3 Then
			If MQTT.IsInitialized And MQTT.Connected  Then
				MQTT.Publish("MQ7Basement", bc.StringToBytes("Read voltage", "utf8"))
			End If
			CheckAirQualitySettingBasement
		End If
		If Position = 4 Then
			btnDriveway.Enabled = False
			ScrollViewBlink.ScrollToNow(0)
			BlurIV("Driveway.jpg",ivDriveway)
			BlurIV("FrontDoor.jpg",ivFrontDoor)
			BlurIV("SideYard.jpg",ivSideYard)
			RequestAuthToken
		End If
	Catch
		Log(LastException)
	End Try
End Sub

Public Sub GetAllTabLabels (tabstrip As TabStrip) As List
	Dim jo As JavaObject = tabstrip
	Dim r As Reflector
	r.Target = jo.GetField("tabStrip")
	Dim tc As Panel = r.GetField("tabsContainer")
	Dim res As List
	res.Initialize
	For Each v As View In tc
		If v Is Label Then res.Add(v)
	Next
	Return res
End Sub

Sub Activity_KeyPress (KeyCode As Int) As Boolean 'ignore
	If KeyCode = KeyCodes.KEYCODE_BACK Then
		If TabStrip1.CurrentPage = 2 Then
			TabStrip1.ScrollTo(1,True)
			TabStrip1_PageSelected(1)
			Return True
		Else If TabStrip1.CurrentPage = 1 Then
			TabStrip1.ScrollTo(0,True)
			TabStrip1_PageSelected(0)
			Return True
		Else If TabStrip1.CurrentPage = 3 Then
			TabStrip1.ScrollTo(2,True)
			TabStrip1_PageSelected(2)
			Return True
		Else If TabStrip1.CurrentPage = 4 Then
			TabStrip1.ScrollTo(3,True)
			TabStrip1_PageSelected(3)
			Return True
		End If
	End If
	
End Sub

Sub CheckAirQualitySetting
	Dim cs As CSBuilder
	cs.Initialize
	Try
		Dim status As String
		status = StateManager.GetSetting("AirQuality")
		status = status.Replace("|24:","|00:")
		Dim a() As String = Regex.Split("\|",status)
		If a.Length = 3 Then
			If IsNumber(a(0)) And a(0) > 0 Then
				GaugeAirQuality.CurrentValue = a(0)
				If a(0) > 400 Then
					lblAirQuality.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Color(Colors.Red).Append(GetAirQuality(a(0))).PopAll
				Else
					lblAirQuality.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Append(GetAirQuality(a(0))).PopAll
				End If
				If a(1) = "" Then
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(1) = DateTime.Date(Tomorrow)
				End If
				If a(2).Contains("|24:") Then
					a(2) = a(2).Replace("|24:","|00:")
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(2) = DateTime.Date(Tomorrow)
				End If
				DateTime.DateFormat = "yy-MM-dd HH:mm:ss z"
				Dim ticks As Long = DateTime.DateParse(a(1) & " " & a(2) & " GMT")
				DateTime.DateFormat = "MMM d, yyyy h:mm:ss a z"
				Dim lngTicks As Long = ticks
				Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
				'Log("AirQuality Time difference: " & p.Minutes & " minutes" & p.Seconds & " seconds")
				If p.Minutes > = 5 Then
					lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(DateTime.Date(lngTicks)).PopAll
				Else
					lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append(DateTime.Date(lngTicks)).PopAll
				End If
			Else If a(2) = "00:00:00" Then
				lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(lblAirQualityLastUpdate.Text.Replace("Last update: ","")).PopAll
			End If
		End If
	Catch
		Log(LastException)
		lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Exception: ").Pop.Color(Colors.Red).Append(LastException).PopAll
	End Try
End Sub

Sub CheckAirQualitySettingBasement
	Dim cs As CSBuilder
	cs.Initialize
	Try
		Dim status As String
		status = StateManager.GetSetting("AirQualityBasement")
		status = status.Replace("|24:","|00:")
		Dim a() As String = Regex.Split("\|",status)
		If a.Length = 3 Then
			If IsNumber(a(0)) And a(0) > 0 Then
				GaugeAirQualityBasement.CurrentValue = a(0)
				If a(0) > 400 Then
					lblAirQualityBasement.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Color(Colors.Red).Append(GetAirQuality(a(0))).PopAll
				Else
					lblAirQualityBasement.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Append(GetAirQuality(a(0))).PopAll
				End If
				If a(1) = "" Then
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(1) = DateTime.Date(Tomorrow)
				End If
				If a(2).Contains("|24:") Then
					a(2) = a(2).Replace("|24:","|00:")
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(2) = DateTime.Date(Tomorrow)
				End If
				
				DateTime.DateFormat = "yy-MM-dd HH:mm:ss z"
				Dim ticks As Long = DateTime.DateParse(a(1) & " " & a(2) & " GMT")
				DateTime.DateFormat = "MMM d, yyyy h:mm:ss a z"
				Dim lngTicks As Long = ticks
				Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
				'Log("AirQuality Time difference: " & p.Minutes & " minutes" & p.Seconds & " seconds")
				If p.Minutes > = 5 Then
					lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(DateTime.Date(lngTicks)).PopAll
				Else
					lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append(DateTime.Date(lngTicks)).PopAll
				End If
			Else If a(2) = "00:00:00" Then
				lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(lblAirQualityLastUpdateBasement.Text.Replace("Last update: ","")).PopAll
			End If
		End If
	Catch
		Log(LastException)
		lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Exception: ").Pop.Color(Colors.Red).Append(LastException).PopAll
	End Try
End Sub

Sub CheckTempHumiditySetting
	Dim cs As CSBuilder
	cs.Initialize
	Try
		Dim status As String
		status = StateManager.GetSetting("TempHumidity")
		status = status.Replace("|24:","|00:")
		Dim a() As String = Regex.Split("\|",status)
		If a.Length = 9 Then
			Dim cs As CSBuilder
			cs.Initialize
			If a(0) = "OK" And a(1) > 0 Then
				GaugeTemp.CurrentValue = a(1)
				GaugeHumidity.CurrentValue = a(2)
				lblPerception.Text = cs.Initialize.Bold.Append("Human Perception: ").Pop.Append(GetPerception(a(3))).PopAll
				If a(4) = 2 Or a(4) = 6 Or a(4) = 10 Then
					lblComfort.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Color(Colors.Blue).Append(GetComfort(a(4))).PopAll
				else If a(4) = 0 Then
					lblComfort.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Append(GetComfort(a(4))).PopAll
				Else
					lblComfort.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Color(Colors.Red).Append(GetComfort(a(4))).PopAll
				End If
				
				GaugeHeatIndex.CurrentValue = a(5)
				GaugeDewPoint.CurrentValue = a(6)
				If a(7) = "" Then
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(7) = DateTime.Date(Tomorrow)
				End If
				If a(8).Contains("|24:") Then
					a(8) = a(8).Replace("|24:","|00:")
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(7) = DateTime.Date(Tomorrow)
				End If
				DateTime.DateFormat = "yy-MM-dd HH:mm:ss z"
				Dim ticks As Long = DateTime.DateParse(a(7) & " " & a(8) & " GMT")
				DateTime.DateFormat = "MMM d, yyyy h:mm:ss a z"
				Dim lngTicks As Long = ticks
				Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
				'Log("TempHumidity Time difference: " & p.Hours & ":" & p.Minutes & " minutes")
				If p.Minutes > = 5 Then
					lblLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(DateTime.Date(lngTicks)).PopAll
				Else
					lblLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append(DateTime.Date(lngTicks)).PopAll
				End If
			Else If a(8) = "00:00:00" Then
				lblLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(lblLastUpdate.Text.Replace("Last update: ","")).PopAll
			End If
		End If
	Catch
		Log(LastException)
		lblLastUpdate.Text = cs.Initialize.Bold.Append("Exception: ").Pop.Color(Colors.Red).Append(LastException).PopAll
	End Try
End Sub

Sub CheckTempHumiditySettingBasement
	Dim cs As CSBuilder
	cs.Initialize
	Try
		Dim status As String
		status = StateManager.GetSetting("TempHumidityBasement")
		status = status.Replace("|24:","|00:")
		Dim a() As String = Regex.Split("\|",status)
		If a.Length = 9 Then
			Dim cs As CSBuilder
			cs.Initialize
			If a(0) = "OK" And a(1) > 0 Then
				GaugeTempBasement.CurrentValue = a(1)
				GaugeHumidityBasement.CurrentValue = a(2)
				lblPerceptionBasement.Text = cs.Initialize.Bold.Append("Human Perception: ").Pop.Append(GetPerception(a(3))).PopAll
				If a(4) = 2 Or a(4) = 6 Or a(4) = 10 Then
					lblComfortBasement.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Color(Colors.Blue).Append(GetComfort(a(4))).PopAll
				else If a(4) = 0 Then
					lblComfortBasement.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Append(GetComfort(a(4))).PopAll
				Else
					lblComfortBasement.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Color(Colors.Red).Append(GetComfort(a(4))).PopAll
				End If
				GaugeHeatIndexBasement.CurrentValue = a(5)
				GaugeDewPointBasement.CurrentValue = a(6)
				If a(7) = "" Then
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(7) = DateTime.Date(Tomorrow)
				End If
				If a(8).Contains("|24:") Then
					a(8) = a(8).Replace("|24:","|00:")
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(7) = DateTime.Date(Tomorrow)
				End If
				DateTime.DateFormat = "yy-MM-dd HH:mm:ss z"
				Dim ticks As Long = DateTime.DateParse(a(7) & " " & a(8) & " GMT")
				DateTime.DateFormat = "MMM d, yyyy h:mm:ss a z"
				Dim lngTicks As Long = ticks
				Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
				'Log("TempHumidity Time difference: " & p.Hours & ":" & p.Minutes & " minutes")
				If p.Minutes > = 5 Then
					lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(DateTime.Date(lngTicks)).PopAll
				Else
					lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append(DateTime.Date(lngTicks)).PopAll
				End If
			Else If a(8) = "00:00:00" Then
				lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(lblLastUpdateBasement.Text.Replace("Last update: ","")).PopAll
			End If
		End If
	Catch
		Log(LastException)
		lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Exception: ").Pop.Color(Colors.Red).Append(LastException).PopAll
	End Try
End Sub

Sub CreatePreferenceScreen
	screen.Initialize("Settings", "")
	'create two categories
	Dim cat1,cat2,cat3 As AHPreferenceCategory
	
	cat1.Initialize("Temperature & Humidity")
	cat1.AddEditText("TempHumidityCooldownTime", "Living Area Cooldown Time", "Minimum creation time interval between new notification", "5","")
	cat1.AddEditText("TempHumidityCooldownTimeBasement", "Basement Cooldown Time", "Minimum creation time interval between new notification", "5","")
	cat1.AddEditText("HumidityAddValue", "Humidity Additional Value", "Value to be added to humidity to improve accuracy", "0","")
	
	cat2.Initialize("Special Settings")
	Dim In As Intent
	In.Initialize("android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS", "")
	cat2.AddIntent("Notification Access", "Enable or disable listening to notifications", In, Null)
	
	cat3.Initialize("Sensors")
	cat3.AddEditText("SensorNotRespondingTime", "Sensor Not Responding", "Data age when to restart sensor", "5","")
	
	screen.AddPreferenceCategory(cat2)
	screen.AddPreferenceCategory(cat1)
	screen.AddPreferenceCategory(cat3)
	StateManager.SetSetting("TempHumidityCooldownTime","5")
	StateManager.SetSetting("TempHumidityCooldownTimeBasement","5")
	StateManager.SetSetting("HumidityAddValue","0")
	StateManager.SetSetting("SensorNotRespondingTime","5")
	StateManager.SaveSettings
End Sub


Sub SetDefaults
	'defaults are only set on the first run.
	manager.SetString("TempHumidityCooldownTime", "5")
	manager.SetString("TempHumidityCooldownTimeBasement", "5")
	manager.SetString("HumidityAddValue", "0")
	manager.SetString("SensorNotRespondingTime", "5")
	StateManager.SetSetting("TempHumidityCooldownTime","5")
	StateManager.SetSetting("TempHumidityCooldownTimeBasement","5")
	StateManager.SetSetting("HumidityAddValue","0")
	StateManager.SetSetting("SensorNotRespondingTime","5")
	StateManager.SaveSettings
End Sub

Sub HandleSettings
	StateManager.SetSetting("TempHumidityCooldownTime",manager.GetString("TempHumidityCooldownTime"))
	StateManager.SetSetting("TempHumidityCooldownTimeBasement",manager.GetString("TempHumidityCooldownTimeBasement"))
	StateManager.SetSetting("HumidityAddValue",manager.GetString("HumidityAddValue"))
	StateManager.SetSetting("SensorNotRespondingTime",manager.GetString("SensorNotRespondingTime"))
	StateManager.SaveSettings
End Sub


Sub RequestAuthToken
	' https://github.com/MattTW/BlinkMonitorProtocol
	' http://www.basic4ppc.com:51042/json/index.html
	' https://www.b4x.com/android/forum/threads/b4x-okhttputils2-with-wait-for.79345/#content
	' https://www.b4x.com/android/forum/threads/call-api-rest.89470/#content
	' https://www.b4x.com/android/forum/threads/server-online-json-tree-example.39048/#content
	Try
		lblStatus.Text = "Authenticating..."
		Dim jobLogin As HttpJob
		jobLogin.Initialize("", Me)
		jobLogin.PostString("https://rest.prod.immedia-semi.com/login","email=" &  emailAddress & "&password=" & password)
		jobLogin.GetRequest.SetContentType("application/x-www-form-urlencoded")
		Wait For (jobLogin) JobDone(jobLogin As HttpJob)
		If jobLogin.Success Then
			lblStatus.Text = "Successfully logged in to the Blink server..."
			
			GetAuthInfo(jobLogin.GetString)

			RESTGet("https://rest-" & userRegion & ".immedia-semi.com/user")
			Sleep(1000)
			If response.StartsWith("ERROR: ") Then
				Return
			Else
				lblStatus.Text = "AuthToken acquired..."
				GetUserInfo(response)
			End If
			
			RESTGet("https://rest-" & userRegion &".immedia-semi.com/api/v1/camera/usage")
			Sleep(1000)
			If response.StartsWith("ERROR: ") Then
				Return
			Else
				GetAllCameras(response)
			End If
		Else
			lblStatus.Text = GetRESTError(jobLogin.ErrorMessage) ' "RequestAuthToken error: " & jobLogin.GetString
			Log("RequestAuthToken error: " & jobLogin.ErrorMessage)
			Return
		End If
		jobLogin.Release
		RefreshCameras(True)
	Catch
		ToastMessageShow("RequestAuthToken: " & LastException,False)
		Log("RequestAuthToken LastException: " & LastException)
	End Try
End Sub

Sub RefreshCameras(FirstRun As Boolean)
	' https://github.com/MattTW/BlinkMonitorProtocol
	' http://www.basic4ppc.com:51042/json/index.html
	' https://www.b4x.com/android/forum/threads/b4x-okhttputils2-with-wait-for.79345/#content
	' https://www.b4x.com/android/forum/threads/call-api-rest.89470/#content
	' https://www.b4x.com/android/forum/threads/server-online-json-tree-example.39048/#content
	Try
		Dim camera As String
		Dim iv As ImageView
		Dim clv As CustomListView
		Dim links As List
		links = Array("347574", "236967", "226821")
		
		RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/syncmodules")
		Sleep(1000)
		GetSyncModuleInfo(response)
		
		lblDrivewayBatt.Visible = True
		lblDrivewayTimestamp.Visible = True
		lblDrivewayWifi.Visible = True
		lblDriveway.Visible = True
		lblFrontDoorBatt.Visible = True
		lblFrontDoorTimestamp.Visible = True
		lblFrontDoorWiFi.Visible = True
		lblFrontDoor.Visible = True
		lblSideYardBatt.Visible = True
		lblSideYardTimestamp.Visible = True
		lblSideYardWiFi.Visible = True
		lblSideYard.Visible = True
		
		For Each link As String In links
			camera = link
			If FirstRun Then
				If camera = "347574" Then
					lblStatus.Text = "Retrieving Driveway thumbnail..."
					iv = ivDriveway
				Else If camera = "236967" Then
					lblStatus.Text = "Retrieving Front Door thumbnail..."
					iv = ivFrontDoor
				Else If camera = "226821" Then
					lblStatus.Text = "Retrieving Side Yard thumbnail..."
					iv = ivSideYard
				End If
			Else
				If camera = "347574" Then
					lblStatus.Text = "Capturing a new Driveway thumbnail..."
					iv = ivDriveway
				Else If camera = "236967" Then
					lblStatus.Text = "Capturing a new Front Door thumbnail..."
					iv = ivFrontDoor
				Else If camera = "226821" Then
					lblStatus.Text = "Capturing a new Side Yard thumbnail..."
					iv = ivSideYard
				End If
			End If

			If FirstRun Then
				'iv.SetImage(Null)
				RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera)
				Sleep(1000)
				GetCameraInfo(response,clv)
				DownloadImage("https://rest-" & userRegion &".immedia-semi.com/" & cameraThumbnail & ".jpg",iv, camera)
			Else
				RESTPost("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera & "/thumbnail")
				Sleep(1000)
				If response.StartsWith("ERROR: ") Then
					btnDriveway.Enabled = True
					Return
				Else
					GetCommandID(response)
					RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
					Sleep(1000)
					If response.StartsWith("ERROR: ") Then
						btnDriveway.Enabled = True
						Return
					Else
						For i = 1 To 30
							GetCommandStatus(response)
							If commandComplete Then
								RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera)
								Sleep(1000)
								GetCameraInfo(response,clv)
								DownloadImage("https://rest-" & userRegion &".immedia-semi.com/" & cameraThumbnail & ".jpg",iv,camera)
								Exit
							Else
								If camera = "347574" Then
									lblStatus.Text = "Awaiting for the Driveway thumbnail... " & i & "/30"
								Else If camera = "236967" Then
									lblStatus.Text = "Awaiting for the Front Door thumbnail...  " & i & "/30"
								Else If camera = "226821" Then
									lblStatus.Text = "Awaiting for the Side Yard thumbnail... " & i & "/30"
								End If
							End If
							RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
							Sleep(1000)
						Next
						If commandComplete = False Then
							If camera = "347574" Then
								lblStatus.Text = "Failed to retrieve Driveway thumbnail..."
								'ivDriveway.SetImage(Null)
							Else If camera = "236967" Then
								lblStatus.Text = "Failed to retrieve Front Door thumbnail..."
								'ivFrontDoor.SetImage(Null)
							Else If camera = "226821" Then
								lblStatus.Text = "Failed to retrieve Side Yard thumbnail..."
								'ivSideYard.SetImage(Null)
							End If
						Else
'							Dim strTimestamp As String
'							DateTime.DateFormat = "h:mm:ss a"
'							strTimestamp = DateTime.Date(DateTime.Now)
'							lblStatus.Text = "Last updated: " & strTimestamp
'							If camera = "347574" Then
'								lblDriveway.Text = "Driveway " & strTimestamp
'							Else If camera = "236967" Then
'								lblFrontDoor.Text = "Front Door " & strTimestamp
'							Else If camera = "226821" Then
'								lblSideYard.Text = "Side Yard " & strTimestamp
'							End If
						End If
					End If
				End If
			End If
		Next
		lblStatus.Text = "Ready"
	Catch
		Log("RefreshCamera LastException: " & LastException)
		ToastMessageShow("RefreshCamera: " & LastException,False)
	End Try
	btnDriveway.Enabled = True
End Sub

Sub RESTGet(url As String) As ResumableSub
	Try
		Dim j As HttpJob
		response = ""
		j.Initialize("", Me) 'name is empty as it is no longer needed
		j.Download(url)
		j.GetRequest.SetHeader("TOKEN_AUTH", authToken)
		Wait For (j) JobDone(j As HttpJob)
		If j.Success Then
			response = j.GetString
		Else
			response = "ERROR: " & j.ErrorMessage
			lblStatus.Text = GetRESTError(j.ErrorMessage)
		End If
		j.Release
	Catch
		response = "ERROR: " & LastException
		Log("RESTDownload LastException: " & LastException)
		ToastMessageShow("RESTGet: " & LastException,False)
	End Try
	Log("URL: " & url)
	Log("Response: " & response)
	Return(response)
End Sub

Sub RESTPost(url As String) As ResumableSub
	Try
		Dim j As HttpJob
		response = ""
		j.Initialize("", Me) 'name is empty as it is no longer needed
		j.PostString(url,"")
		j.GetRequest.SetContentType("application/x-www-form-urlencoded")
		j.GetRequest.SetHeader("TOKEN_AUTH", authToken)
		Wait For (j) JobDone(j As HttpJob)
		If j.Success Then
			response = j.GetString
		Else
			response = "ERROR: " & j.ErrorMessage
			lblStatus.Text = GetRESTError(j.ErrorMessage)
		End If
		j.Release
	Catch
		response = "ERROR: " & LastException
		Log("RESTPost LastException: " & LastException)
		ToastMessageShow("RESTPost: " & LastException,False)
	End Try
	Log("URL: " & url)
	Log("Response: " & response)
	Return(response)
End Sub

Sub DownloadImage (Link As String, iv As ImageView, camera As String) 'ignore
	Try
		Dim j As HttpJob
		response = ""
		j.Initialize("", Me)
		j.Download(Link)
		j.GetRequest.SetHeader("TOKEN_AUTH", authToken)
		Wait For (j) JobDone(j As HttpJob)
		If j.Success Then
			' Save to a JPG file
'			Dim dir As String =rp.GetSafeDirDefaultExternal("")
'			If camera = "347574" Then
'				Dim out As OutputStream = File.OpenOutput(dir, "Driveway.jpg", False)
'			Else If camera = "236967" Then
'				Dim out As OutputStream = File.OpenOutput(dir, "FrontDoor.jpg", False)
'			Else If camera = "226821" Then
'				Dim out As OutputStream = File.OpenOutput(dir, "SideYard.jpg", False)
'			End If
'			File.Copy2(j.GetInputStream, out)
'			out.Close '<------ very important
			
			' Display in ImageView
			iv.Bitmap = j.GetBitmap
		Else
			response = "ERROR: " & j.ErrorMessage
			lblStatus.Text = GetRESTError(j.ErrorMessage)
		End If
		j.Release
	Catch
		ToastMessageShow("DownloadImage: " & LastException,False)
		Log(LastException)
	End Try
End Sub


Sub GetAuthInfo(json As String)
	Try
		lblStatus.Text = "Getting authtoken..."
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		Dim authtokenmap As Map = root.Get("authtoken")
		authToken = authtokenmap.Get("authtoken")
		Log("authToken: " &  authToken)
'	Dim message As String = authtoken.Get("message")
'	Dim client As Map = root.Get("client")
'	Dim id As Int = client.Get("id")
'	Dim networks As Map = root.Get("networks")
'	Dim 94896 As Map = networks.Get("94896")
'	Dim onboarded As String = 94896.Get("onboarded")
'	Dim name As String = 94896.Get("name")
		Dim region As Map = root.Get("region")
		userRegion = region.GetKeyAt(0)
		Log("userRegion: " &  userRegion)
'	Dim u006 As String = region.Get("u006")
'	Dim account As Map = root.Get("account")
'	Dim id As Int = account.Get("id")
	Catch
		Log(LastException)
		ToastMessageShow("GetAuthInfo: " & LastException,False)
	End Try

End Sub

Sub GetUserInfo(json As String)
	Try
		lblStatus.Text = "Getting user information..."
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
'	Dim owner As String = root.Get("owner")
'	Dim temp_units As String = root.Get("temp_units")
'	Dim verified As String = root.Get("verified")
'	Dim pin_created_at As String = root.Get("pin_created_at")
'	Dim created_at As String = root.Get("created_at")
'	Dim time_zone As String = root.Get("time_zone")
'	Dim Type As String = root.Get("type")
'	Dim pin_failures As Int = root.Get("pin_failures")
'	Dim updated_at As String = root.Get("updated_at")
'	Dim reset_expiration As String = root.Get("reset_expiration")
'	Dim pin As String = root.Get("pin")
'	Dim name As String = root.Get("name")
'	Dim user_access As String = root.Get("user_access")
		'accountID = root.Get("id") '88428 <-- OLD INCORRECT
		accountID = root.Get("account_id") '88438
		Log("accountID: " &  accountID)
		'   Dim email As String = root.Get("email")
	Catch
		Log(LastException)
		ToastMessageShow("GetUserInfo: " & LastException,False)
	End Try
End Sub

Sub GetAllCameras(json As String)
	Try
		lblStatus.Text = "Getting all cameras information..."
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
'	Dim reference As Map = root.Get("reference")
'	Dim usage As Int = reference.Get("usage")
'	Dim range_days As Int = root.Get("range_days")
		Dim networks As List = root.Get("networks")
		For Each colnetworks As Map In networks
'		Dim cameras As List = colnetworks.Get("cameras")
'		For Each colcameras As Map In cameras
'			Dim usage As Int = colcameras.Get("usage")
'			Dim name As String = colcameras.Get("name")
'			Dim lv_seconds As Int = colcameras.Get("lv_seconds")
'			Dim id As Int = colcameras.Get("id")
'			Dim clip_seconds As Int = colcameras.Get("clip_seconds")
'		Next
			networkID = colnetworks.Get("network_id")
			Log("networkID: " &  networkID)
			'Dim name As String = colnetworks.Get("name")
		Next
	Catch
		Log(LastException)
		ToastMessageShow("GetAllCameras: " & LastException,False)
	End Try
End Sub

Sub GetCommandID(json As String)
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
'	Dim server As String = root.Get("server")
'	Dim stage_vs As String = root.Get("stage_vs")
'	Dim firmware_id As String = root.Get("firmware_id")
'	Dim stage_rest As String = root.Get("stage_rest")
'	Dim created_at As String = root.Get("created_at")
'	Dim stage_cs_db As String = root.Get("stage_cs_db")
'	Dim sm_ack As String = root.Get("sm_ack")
'	Dim duration As String = root.Get("duration")
'	Dim stage_is As String = root.Get("stage_is")
'	Dim stage_cs_sent As String = root.Get("stage_cs_sent")
'	Dim updated_at As String = root.Get("updated_at")
'	Dim stage_dev As String = root.Get("stage_dev")
'	Dim execute_time As String = root.Get("execute_time")
'	Dim by_whom As String = root.Get("by_whom")
		commandID = root.Get("id")
		Log("commandID: " & commandID)
'	Dim diagnostic As String = root.Get("diagnostic")
'	Dim player_transaction As String = root.Get("player_transaction")
'	Dim attempts As Int = root.Get("attempts")
'	Dim lfr_ack As String = root.Get("lfr_ack")
'	Dim stage_sm As String = root.Get("stage_sm")
'	Dim debug As String = root.Get("debug")
'	Dim state_stage As String = root.Get("state_stage")
'	Dim camera_id As Int = root.Get("camera_id")
'	Dim target_id As Int = root.Get("target_id")
'	Dim command As String = root.Get("command")
'	Dim target As String = root.Get("target")
'	Dim stage_lv As String = root.Get("stage_lv")
'	Dim sequence As String = root.Get("sequence")
'	Dim network_id As Int = root.Get("network_id")
'	Dim account_id As Int = root.Get("account_id")
'	Dim state_condition As String = root.Get("state_condition")
'	Dim siren_id As String = root.Get("siren_id")
'	Dim parent_command_id As String = root.Get("parent_command_id")
'	Dim sync_module_id As Int = root.Get("sync_module_id")
'	Dim transaction As String = root.Get("transaction")
	Catch
		Log(LastException)
		ToastMessageShow("GetCommandID: " & LastException, False)
	End Try
End Sub

Sub GetCommandStatus(json As String)
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		commandComplete = root.Get("complete")
		Log("commandComplete: " & commandComplete)
	Catch
		Log(LastException)
		ToastMessageShow("GetCommandStatus: " & LastException,False)
	End Try
End Sub

Sub GetRESTError(json As String) As String
	Try
		'ResponseError. Reason: , Response: {"message":"Invalid credentials","code":200}
		'RequestAuthToken LastException: (FileNotFoundException) java.io.FileNotFoundException: /data/user/0/cloyd.smart.home.monitor/cache/1 (No such file or directory)
		'ResponseError. Reason: , Response: <h1>Not Found</h1>
		If json.Contains("<h1>Not Found</h1>") Then
			Return "REST endpoint not found. Try again."
		Else
			If json.IndexOf("{") <> -1 Then
				json = json.SubString(json.IndexOf("{"))
				Dim parser As JSONParser
				parser.Initialize(json)
				Dim root As Map = parser.NextObject
				Dim code As Int = root.Get("code")
				Dim message As String = root.Get("message")
				Log("Code: " & code & " Message: " & message)
				Return "Code: " & code & " Message: " & message
			Else
				Return json
			End If
		End If
	Catch
		Log(LastException)
		ToastMessageShow("GetRESTError: " & LastException,False)
		Return json
	End Try
End Sub

Sub GetCameraInfo(json As String, clv As CustomListView)
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		Dim camera_status As Map = root.Get("camera_status")
		Dim total_108_wakeups As Int = camera_status.Get("total_108_wakeups")
		Dim battery_voltage As Int = camera_status.Get("battery_voltage")
		Dim light_sensor_data_valid As String = camera_status.Get("light_sensor_data_valid")
		Dim lfr_tb_wakeups As Int = camera_status.Get("lfr_tb_wakeups")
		Dim fw_git_hash As String = camera_status.Get("fw_git_hash")
		Dim wifi_strength As Int = camera_status.Get("wifi_strength")
		Dim lfr_strength As Int = camera_status.Get("lfr_strength")
		Dim total_tb_wakeups As Int = camera_status.Get("total_tb_wakeups")
		Dim created_at As String = camera_status.Get("created_at")
		Dim light_sensor_ch0 As Int = camera_status.Get("light_sensor_ch0")
		Dim mac As String = camera_status.Get("mac")
		Dim unit_number As Int = camera_status.Get("unit_number")
		Dim updated_at As String = camera_status.Get("updated_at")
		Dim light_sensor_ch1 As Int = camera_status.Get("light_sensor_ch1")
		Dim time_dhcp_lease As Int = camera_status.Get("time_dhcp_lease")
		Dim temperature As Int = camera_status.Get("temperature")
		Dim time_first_video As Int = camera_status.Get("time_first_video")
		Dim time_dns_resolve As Int = camera_status.Get("time_dns_resolve")
		Dim id As Int = camera_status.Get("id")
		Dim temp_alert_status As String = camera_status.Get("temp_alert_status")
		Dim time_108_boot As Int = camera_status.Get("time_108_boot")
		Dim lfr_108_wakeups As Int = camera_status.Get("lfr_108_wakeups")
		cameraThumbnail = camera_status.Get("thumbnail")
		Log("cameraThumbnail: " & cameraThumbnail)
		Dim lifetime_duration As Int = camera_status.Get("lifetime_duration")
		Dim wifi_connect_failure_count As Int = camera_status.Get("wifi_connect_failure_count")
		Dim camera_id As Int = camera_status.Get("camera_id")
		Dim battery_alert_status As String = camera_status.Get("battery_alert_status")
		Dim dhcp_failure_count As Int = camera_status.Get("dhcp_failure_count")
		Dim ip_address As String = camera_status.Get("ip_address")
		Dim ipv As String = camera_status.Get("ipv")
		Dim light_sensor_data_new As String = camera_status.Get("light_sensor_data_new")
		Dim network_id As Int = camera_status.Get("network_id")
		Dim account_id As Int = camera_status.Get("account_id") '88438
		Dim serial As String = camera_status.Get("serial")
		Dim dev_1 As Int = camera_status.Get("dev_1")
		Dim time_wlan_connect As Int = camera_status.Get("time_wlan_connect")
		Dim dev_2 As Int = camera_status.Get("dev_2")
		Dim socket_failure_count As Int = camera_status.Get("socket_failure_count")
		Dim dev_3 As Int = camera_status.Get("dev_3")
		Dim pir_rejections As Int = camera_status.Get("pir_rejections")
		Dim sync_module_id As Int = camera_status.Get("sync_module_id")
		Dim lifetime_count As Int = camera_status.Get("lifetime_count")
		Dim error_codes As Int = camera_status.Get("error_codes")
		Dim fw_version As String = camera_status.Get("fw_version")
		Dim ac_power As String = camera_status.Get("ac_power")

'		Dim strTimestamp As String
'		strTimestamp = ConvertDateTime(updated_at)
'		lblStatus.Text = "Last updated: " & strTimestamp

		If camera_id = "347574" Then
			lblDrivewayBatt.Text = "Batt: " & NumberFormat2((battery_voltage / 100),0,2,2,False) & "V - " & CheckBattLife(battery_voltage)
			lblDrivewayTimestamp.Text = ConvertDateTime(updated_at)
			lblDriveway.Text = "Driveway v" & fw_version
			lblDrivewayWifi.Text = "WiFi: " & wifi_strength & "dBm - " & CheckLFRLevel(wifi_strength)
		Else If camera_id = "236967" Then
			lblFrontDoorBatt.Text = "Batt: " & NumberFormat2((battery_voltage / 100),0,2,2,False) & "V - " & CheckBattLife(battery_voltage)
			lblFrontDoorTimestamp.Text = ConvertDateTime(updated_at)
			lblFrontDoor.Text = "Front Door v" & fw_version
			lblFrontDoorWiFi.Text = "WiFi: " & wifi_strength & "dBm - " & CheckLFRLevel(wifi_strength)
		Else If camera_id = "226821" Then
			lblSideYardBatt.Text = "Batt: " & NumberFormat2((battery_voltage / 100),0,2,2,False) & "V - " & CheckBattLife(battery_voltage)
			lblSideYardTimestamp.Text = ConvertDateTime(updated_at)
			lblSideYard.Text = "Side Yard v" & fw_version
			lblSideYardWiFi.Text = "WiFi: " & wifi_strength & "dBm - " & CheckLFRLevel(wifi_strength)
		End If
		
		
'		For i = 0 To clv.Size-1
'			Dim item As String
'			item = clv.GetValue(i)
'			If item.Contains("thumbnail") Then
'				clv.ResizeItem(i,80dip)
'			Else
'				clv.ResizeItem(i,35dip)
'			End If
'		Next
	Catch
		Log(LastException)
		ToastMessageShow("GetCameraInfo: " & LastException, False)
	End Try
End Sub

Sub GetSyncModuleInfo(json As String)
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		Dim syncmodule As Map = root.Get("syncmodule")
'	Dim onboarded As String = syncmodule.Get("onboarded")
'	Dim server As String = syncmodule.Get("server")
'	Dim feature_plan_id As String = syncmodule.Get("feature_plan_id")
		Dim wifi_strength As Int = syncmodule.Get("wifi_strength")
		Dim os_version As String = syncmodule.Get("os_version")
'	Dim created_at As String = syncmodule.Get("created_at")
'	Dim ip_address As String = syncmodule.Get("ip_address")
'	Dim table_update_sequence As Int = syncmodule.Get("table_update_sequence")
'	Dim lfr_frequency As String = syncmodule.Get("lfr_frequency")
'	Dim last_wifi_alert As String = syncmodule.Get("last_wifi_alert")
'	Dim offline_alert_count As Int = syncmodule.Get("offline_alert_count")
'	Dim last_hb As String = syncmodule.Get("last_hb")
'	Dim network_id As Int = syncmodule.Get("network_id")
'	Dim last_activity As String = syncmodule.Get("last_activity")
'	Dim account_id As Int = syncmodule.Get("account_id") '88438
'	Dim updated_at As String = syncmodule.Get("updated_at")
'	Dim serial As String = syncmodule.Get("serial")
'	Dim mac_address As String = syncmodule.Get("mac_address")
'	Dim wifi_alert_count As Int = syncmodule.Get("wifi_alert_count")
'	Dim name As String = syncmodule.Get("name")
'	Dim id As Int = syncmodule.Get("id")
		Dim fw_version As String = syncmodule.Get("fw_version")
'	Dim last_offline_alert As String = syncmodule.Get("last_offline_alert")
		Dim status As String = syncmodule.Get("status")
		lblSyncModule.Text = "Sync Module is " & status & CRLF & CRLF & "Wifi Strength: " & wifi_strength & " bars" & CRLF & "Firmware version: " & fw_version & CRLF & "OS version: " & os_version
	Catch
		Log(LastException)
		ToastMessageShow("GetSyncModuleInfo: " & LastException, False)
	End Try
End Sub

Sub CheckBattLife(battlevel As Int) As String
	Try
		' https://www.google.com/imgres?imgurl=https%3A%2F%2Fwww.batteryuniversity.com%2F_img%2Fcontent%2Fbu-106-table-4.jpg&imgrefurl=https%3A%2F%2Fbatteryuniversity.com%2Flearn%2Farticle%2Fprimary_batteries&docid=iRglhUshphFArM&tbnid=lTA22wm3cFfbCM%3A&vet=10ahUKEwjCo66R0NrkAhWVrZ4KHVq8BmcQMwi4AShFMEU..i&w=570&h=265&bih=947&biw=1680&q=AAA%20battery%20level&ved=0ahUKEwjCo66R0NrkAhWVrZ4KHVq8BmcQMwi4AShFMEU&iact=mrc&uact=8
		If battlevel <= 136 Then
			Return "Replace battery now!"
		else If battlevel >= 160 Then
			Return "Very high"
		else If battlevel > 136 And battlevel < 138 Then
			Return "Very low"
		Else
			Return "High"
		End If
	Catch
		Log(LastException)
		ToastMessageShow("CheckBattLife: " & LastException,False)
		Return ""
	End Try
End Sub

Sub CheckLFRLevel(lfrlevel As Int) As String
	Try
		' https://www.metageek.com/training/resources/wifi-signal-strength-basics.html
		If lfrlevel > -67 Then
			Return "Amazing"
		else If lfrlevel > -70 And lfrlevel <= -67 Then
			Return "Very good"
		else If lfrlevel > -80 And lfrlevel <= -70 Then
			Return "OK"
		else If lfrlevel > -90 And lfrlevel <= -80 Then
			Return "Not Good"
		Else
			Return "Unusable"
		End If
	Catch
		Log(LastException)
		lblStatus.Text = "CheckLFRLevel LastException: " & LastException
		Return ""
	End Try
End Sub

Sub ConvertDateTime(inputTime As String) As String
	' https://www.b4x.com/android/forum/threads/convert-utc-to-ticks-and-vice-versa.36592/#content
	Dim ticks As Long = ParseUTCstring(inputTime.Replace("+00:00","+0000"))
	DateTime.DateFormat = "MMM d, yyyy h:mm:ss a"
	Dim lngTicks As Long = ticks
	'Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
	'Log("Time difference: " & p.Days & "d " & p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s")
	Return DateTime.Date(lngTicks)
End Sub

Sub ParseUTCstring(utc As String) As Long
	Dim df As String = DateTime.DateFormat
	Dim res As Long
	If utc.CharAt(10) = "T" Then
		'convert the second format to the first one.
		If utc.CharAt(19) = "." Then utc = utc.SubString2(0, 19) & "+0000"
		DateTime.DateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
		' 2019-09-20T13:04:05+00:00
	Else
		DateTime.DateFormat = "EEE MMM dd HH:mm:ss Z yyyy"
	End If
	Try
		res = DateTime.DateParse(utc)
	Catch
		res = 0
	End Try
	DateTime.DateFormat = df
	Return res
End Sub

Sub btnDriveway_Click
	Dim bd As BitmapDrawable
	bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
	If Msgbox2("Refresh all cameras?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) = DialogResponse.POSITIVE Then
		ScrollViewBlink.ScrollToNow(0)
		btnDriveway.Enabled = False
		BlurIV("Driveway.jpg",ivDriveway)
		BlurIV("FrontDoor.jpg",ivFrontDoor)
		BlurIV("SideYard.jpg",ivSideYard)
		RefreshCameras(False)
	End If
End Sub

Sub BlurIV (image As String,iv As ImageView)
	Try
		Dim bmp As B4XBitmap = xui.LoadBitmapResize(File.DirInternal, image, iv.Width, iv.Height, True)
		iv.Bitmap = (Blur(bmp))
	Catch
		Log(LastException)
		ToastMessageShow("BlurIV: " & LastException,False)
	End Try
End Sub

Private Sub Blur (bmp As B4XBitmap) As B4XBitmap
	Dim bcBitmap As BitmapCreator
	Dim ReduceScale As Int = 2
	bcBitmap.Initialize(bmp.Width / ReduceScale / bmp.Scale, bmp.Height / ReduceScale / bmp.Scale)
	bcBitmap.CopyPixelsFromBitmap(bmp)
	Dim count As Int = 3
	Dim clrs(3) As ARGBColor
	Dim temp As ARGBColor
	Dim m As Int
	For steps = 1 To count
		For y = 0 To bcBitmap.mHeight - 1
			For x = 0 To 2
				bcBitmap.GetARGB(x, y, clrs(x))
			Next
			SetAvg(bcBitmap, 1, y, clrs, temp)
			m = 0
			For x = 2 To bcBitmap.mWidth - 2
				bcBitmap.GetARGB(x + 1, y, clrs(m))
				m = (m + 1) Mod clrs.Length
				SetAvg(bcBitmap, x, y, clrs, temp)
			Next
		Next
		For x = 0 To bcBitmap.mWidth - 1
			For y = 0 To 2
				bcBitmap.GetARGB(x, y, clrs(y))
			Next
			SetAvg(bcBitmap, x, 1, clrs, temp)
			m = 0
			For y = 2 To bcBitmap.mHeight - 2
				bcBitmap.GetARGB(x, y + 1, clrs(m))
				m = (m + 1) Mod clrs.Length
				SetAvg(bcBitmap, x, y, clrs, temp)
			Next
		Next
	Next
	Return bcBitmap.Bitmap
End Sub

Private Sub SetAvg(bcBitmap As BitmapCreator, x As Int, y As Int, clrs() As ARGBColor, temp As ARGBColor)
	temp.Initialize
	For Each c As ARGBColor In clrs
		temp.r = temp.r + c.r
		temp.g = temp.g + c.g
		temp.b = temp.b + c.b
	Next
	temp.a = 255
	temp.r = temp.r / clrs.Length
	temp.g = temp.g / clrs.Length
	temp.b = temp.b / clrs.Length
	bcBitmap.SetARGB(x, y, temp)
End Sub

Sub SetTextShadow(lbl As Label)
	Dim jo As JavaObject = lbl
	Dim radius = 2dip, dx = 0dip, dy = 0dip As Float
	jo.RunMethod("setShadowLayer", Array(radius, dx, dy, Colors.Black))
End Sub


Sub ivSideYard_Click
	lblDrivewayBatt.Visible = Not(lblDrivewayBatt.Visible)
	lblDrivewayTimestamp.Visible = Not(lblDrivewayTimestamp.Visible)
	lblDrivewayWifi.Visible = Not(lblDrivewayWifi.Visible)
	lblDriveway.Visible = Not(lblDriveway.Visible)
	lblFrontDoorBatt.Visible = Not(lblFrontDoorBatt.Visible)
	lblFrontDoorTimestamp.Visible = Not(lblFrontDoorTimestamp.Visible)
	lblFrontDoorWiFi.Visible = Not(lblFrontDoorWiFi.Visible)
	lblFrontDoor.Visible = Not(lblFrontDoor.Visible)
	lblSideYardBatt.Visible = Not(lblSideYardBatt.Visible)
	lblSideYardTimestamp.Visible = Not(lblSideYardTimestamp.Visible)
	lblSideYardWiFi.Visible = Not(lblSideYardWiFi.Visible)
	lblSideYard.Visible = Not(lblSideYard.Visible)
End Sub

Sub ivFrontDoor_Click
	lblDrivewayBatt.Visible = Not(lblDrivewayBatt.Visible)
	lblDrivewayTimestamp.Visible = Not(lblDrivewayTimestamp.Visible)
	lblDrivewayWifi.Visible = Not(lblDrivewayWifi.Visible)
	lblDriveway.Visible = Not(lblDriveway.Visible)
	lblFrontDoorBatt.Visible = Not(lblFrontDoorBatt.Visible)
	lblFrontDoorTimestamp.Visible = Not(lblFrontDoorTimestamp.Visible)
	lblFrontDoorWiFi.Visible = Not(lblFrontDoorWiFi.Visible)
	lblFrontDoor.Visible = Not(lblFrontDoor.Visible)
	lblSideYardBatt.Visible = Not(lblSideYardBatt.Visible)
	lblSideYardTimestamp.Visible = Not(lblSideYardTimestamp.Visible)
	lblSideYardWiFi.Visible = Not(lblSideYardWiFi.Visible)
	lblSideYard.Visible = Not(lblSideYard.Visible)
End Sub

Sub ivDriveway_Click
	lblDrivewayBatt.Visible = Not(lblDrivewayBatt.Visible)
	lblDrivewayTimestamp.Visible = Not(lblDrivewayTimestamp.Visible)
	lblDrivewayWifi.Visible = Not(lblDrivewayWifi.Visible)
	lblDriveway.Visible = Not(lblDriveway.Visible)
	lblFrontDoorBatt.Visible = Not(lblFrontDoorBatt.Visible)
	lblFrontDoorTimestamp.Visible = Not(lblFrontDoorTimestamp.Visible)
	lblFrontDoorWiFi.Visible = Not(lblFrontDoorWiFi.Visible)
	lblFrontDoor.Visible = Not(lblFrontDoor.Visible)
	lblSideYardBatt.Visible = Not(lblSideYardBatt.Visible)
	lblSideYardTimestamp.Visible = Not(lblSideYardTimestamp.Visible)
	lblSideYardWiFi.Visible = Not(lblSideYardWiFi.Visible)
	lblSideYard.Visible = Not(lblSideYard.Visible)
End Sub
